export const testData: string = `<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[./axel.leroy.sh - Blog]]></title><description><![CDATA[Axel Leroy's blog]]></description><link>https://axel.leroy.sh</link><generator>RSS for Node</generator><lastBuildDate>Sun, 04 Aug 2024 14:01:46 GMT</lastBuildDate><atom:link href="https://axel.leroy.sh/feed.xml" rel="self" type="application/rss+xml"/><pubDate>Sun, 04 Aug 2024 14:01:45 GMT</pubDate><copyright><![CDATA[2024 Axel Leroy]]></copyright><language><![CDATA[en]]></language><item><title><![CDATA[How to set Firefox’s language in Cypress]]></title><description><![CDATA[I recently had to test a component which behavior depended on the users locale with Cypress. While changing Chrome’s language is widely documented on the Internet, this is not the case for Firefox, which I document here.
]]></description><link>https://axel.leroy.sh/blog/how-to-set-firefox-language-cypress?utm_source=rss</link><guid isPermaLink="false">https://axel.leroy.sh/blog/how-to-set-firefox-language-cypress</guid><category><![CDATA[Tips and tricks]]></category><category><![CDATA[Web development]]></category><dc:creator><![CDATA[Axel Leroy]]></dc:creator><pubDate>Thu, 01 Aug 2024 16:00:00 GMT</pubDate><enclosure url="https://axel.leroy.sh/blog/how-to-set-firefox-language-cypress/og.jpg" length="0" type="image/jpeg"/><content:encoded><![CDATA[<link rel="preload" as="image" href="https://axel.leroy.sh/blog/how-to-set-firefox-language-cypress/og.jpg"/><p><img src="https://axel.leroy.sh/blog/how-to-set-firefox-language-cypress/og.jpg" alt=""/></p>
<p>Recently, I had to test a component using <em>Cypress</em> and because part of its behavior was based of the user’s locale,
I needed to set the browser’s language. While this is widely documented for Chrome —and to a lesser extent Electron—,
<strong>I have yet to find a straight answer online for Firefox</strong> —my browser of choice.</p>
<p>The closest I found is <a href="https://docs.cypress.io/api/plugins/browser-launch-api#Set-a-Firefox-flag">“Set a Firefox flag” on Cypress’s documentation</a>,
which documents how to update Firefox’s preferences. Then it’s just a matter of finding which preference sets Firefox’s
locale.</p>
<p>After a few searches, it turns out it is stored in <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">intl.accept_languages</span></span></code></span>, which leads to this configuration file:</p>
<figure data-rehype-pretty-code-figure=""><figcaption data-rehype-pretty-code-title="" data-language="js" data-theme="dracula">cypress.config.js</figcaption><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="js" data-theme="dracula"><code data-language="js" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#FF79C6">import</span><span style="color:#F8F8F2"> { defineConfig } </span><span style="color:#FF79C6">from</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">cypress</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">export</span><span style="color:#FF79C6"> default</span><span style="color:#50FA7B"> defineConfig</span><span style="color:#F8F8F2">({</span></span>
<span data-line=""><span style="color:#6272A4">    // replace by &quot;e2e&quot; for end-to-end testing</span></span>
<span data-line=""><span style="color:#F8F8F2">    component</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#50FA7B">        setupNodeEvents</span><span style="color:#F8F8F2">(</span><span style="color:#FFB86C;font-style:italic">on</span><span style="color:#F8F8F2">, </span><span style="color:#FFB86C;font-style:italic">config</span><span style="color:#F8F8F2">) {</span></span>
<span data-line=""><span style="color:#50FA7B">            on</span><span style="color:#F8F8F2">(</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">before:browser:launch</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, (</span><span style="color:#FFB86C;font-style:italic">browser</span><span style="color:#F8F8F2">, </span><span style="color:#FFB86C;font-style:italic">launchOptions</span><span style="color:#F8F8F2">) </span><span style="color:#FF79C6">=&gt;</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#FF79C6">                if</span><span style="color:#F8F8F2"> (browser.family </span><span style="color:#FF79C6">===</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">firefox</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">) {</span></span>
<span data-line=""><span style="color:#F8F8F2">                    launchOptions.preferences[</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">intl.accept_languages</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">] </span><span style="color:#FF79C6">=</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">fr-fr</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">;</span></span>
<span data-line=""><span style="color:#F8F8F2">                }</span></span>
<span data-line=""><span style="color:#FF79C6">                return</span><span style="color:#F8F8F2"> launchOptions;</span></span>
<span data-line=""><span style="color:#F8F8F2">            });</span></span>
<span data-line=""><span style="color:#F8F8F2">        },</span></span>
<span data-line=""><span style="color:#F8F8F2">    },</span></span>
<span data-line=""><span style="color:#F8F8F2">});</span></span></code></pre></figure>]]></content:encoded></item><item><title><![CDATA[Creating the /feeds page to share the RSS feeds I follow]]></title><description><![CDATA[I love RSS: I believe it is the best way to keep yourself informed and up to date. For some time wanted to share the RSS feeds I follow but could not find a practical way of doing it, until a recent FreshRSS release allowed me to do so!
]]></description><link>https://axel.leroy.sh/blog/creating-the-feeds-page?utm_source=rss</link><guid isPermaLink="false">https://axel.leroy.sh/blog/creating-the-feeds-page</guid><category><![CDATA[Web development]]></category><category><![CDATA[Blog]]></category><dc:creator><![CDATA[Axel Leroy]]></dc:creator><pubDate>Fri, 19 Jul 2024 15:50:00 GMT</pubDate><enclosure url="https://axel.leroy.sh/blog/creating-the-feeds-page/og.jpg" length="0" type="image/jpeg"/><content:encoded><![CDATA[<link rel="preload" as="image" href="https://axel.leroy.sh/blog/creating-the-feeds-page/og.jpg"/><p><img src="https://axel.leroy.sh/blog/creating-the-feeds-page/og.jpg" alt=""/></p>
<p>I believe it is important as a software engineer to actively monitor new technologies and features: it helps you choose
the right technologies and tools for a given job, and it might even help to land new job opportunities.</p>
<p>I put a lot of effort in keeping myself informed: I read tens of articles a day, to the point that colleagues would
ask me how I keep up. The answer is simple: <strong>RSS feeds</strong>.</p>
<p>This technology is so simple and <em>yet so effective</em> to get every new blog posts, news articles and even newsletters
—with the help of <a href="https://kill-the-newsletter.com/"><em>Kill the Newsletter!</em></a>— <em>sent to you and organized in a single place</em>.
You no longer need to follow multiple authors and publications on Twitter or Mastodon while fearing to miss <em>the</em>
article you had to read because it was drowned in a gigantic timeline.</p>
<section role="note" aria-label="Note" class="Blocks_info__wkiHx Blocks_post-it__gf2kM Blocks_common__p7gh9"><p>I personally have been using <a href="https://freshrss.github.io/"><em>FreshRSS</em></a> for multiple years as my <em>RSS reader of choice</em>.
I don’t remember why I chose it among others, but I do know why I keep using it: <strong>it is in my opinion the most
feature-complete and customizable reader you can self-host</strong>.</p><p>One of my favorite features —and yet a relatively recent one as <a href="https://github.com/FreshRSS/FreshRSS/releases/tag/1.21.0">it is only a year old</a>— is the
<a href="https://freshrss.github.io/FreshRSS/en/users/11_website_scraping.html">ability to create a feed by scraping a website using <em>XPath</em></a>.
This means you can follow websites that do not have RSS feeds!</p></section>
<p>Now, one thing I love as much as reading is <em>sharing what I read</em>: for a long time I wanted to share the RSS feeds I follow to co-workers
and people on the Internet, which initially led me write a long blog post listing every one of them. The issue was that
such a blog post would become obsolete as soon as I follow a new feed, <em>requiring discipline to keep it up to date</em>.</p>
<p>My plans changed with last May’s release of <a href="https://github.com/FreshRSS/FreshRSS/releases/tag/1.24.0">FreshRSS 1.24</a>:
it now has the <a href="https://freshrss.github.io/FreshRSS/en/users/user_queries.html#share-your-user-queries">ability to share feeds I’m subscribed to</a>
as either an HTML page, an RSS feed or <a href="https://en.wikipedia.org/wiki/OPML">OPML</a>. The last one is commonly used to
export and import subscriptions from an RSS reader to another —this is how I migrated from <em>Feedly</em> to <em>FreshRSS</em> in
the first place— and critically, it contains <em>a list of every feed with their titles and URLs</em>.</p>
<p>Building the feature was quite easy then, all I had to do was</p>
<ol>
<li>Fetch the <em>OPML</em> for the given topic</li>
<li>Parse the <em>XML</em></li>
<li>Iterate through the feeds and display them</li>
</ol>
<p>First, I wrote a simple function that, given a query ID, fetches the XML, parses it and return a nice object I can use
in my JSX:</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="js" data-theme="dracula"><code data-language="js" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#FF79C6">import</span><span style="color:#F8F8F2"> { XMLParser } </span><span style="color:#FF79C6">from</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">fast-xml-parser</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">const</span><span style="color:#F8F8F2"> parser </span><span style="color:#FF79C6">=</span><span style="color:#FF79C6;font-weight:bold"> new</span><span style="color:#50FA7B"> XMLParser</span><span style="color:#F8F8F2">({</span></span>
<span data-line=""><span style="color:#F8F8F2">    ignoreAttributes</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9"> false</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#F8F8F2">});</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">const</span><span style="color:#50FA7B"> listFeeds</span><span style="color:#FF79C6"> =</span><span style="color:#FF79C6"> async</span><span style="color:#F8F8F2"> (</span><span style="color:#FFB86C;font-style:italic">queryId</span><span style="color:#FF79C6">:</span><span style="color:#8BE9FD;font-style:italic"> string</span><span style="color:#F8F8F2">) </span><span style="color:#FF79C6">=&gt;</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#FF79C6">    const</span><span style="color:#F8F8F2"> response </span><span style="color:#FF79C6">=</span><span style="color:#FF79C6"> await</span><span style="color:#50FA7B"> fetch</span><span style="color:#F8F8F2">(</span></span>
<span data-line=""><span style="color:#F1FA8C">        \`https://</span><span style="color:#FF79C6">$\{</span><span style="color:#F8F8F2">process.env.</span><span style="color:#BD93F9">FRESHRSS_URL</span><span style="color:#FF79C6">}</span><span style="color:#F1FA8C">/api/query.php?user=</span><span style="color:#FF79C6">$\{</span><span style="color:#F8F8F2">process.env.</span><span style="color:#BD93F9">FRESHRSS_USER</span><span style="color:#FF79C6">}</span><span style="color:#F1FA8C">&amp;t=</span><span style="color:#FF79C6">$\{</span><span style="color:#F8F8F2">queryId</span><span style="color:#FF79C6">}</span><span style="color:#F1FA8C">&amp;f=opml\`</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#F8F8F2">        {</span></span>
<span data-line=""><span style="color:#F8F8F2">            next</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> { revalidate</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9"> 86400</span><span style="color:#F8F8F2"> },</span></span>
<span data-line=""><span style="color:#F8F8F2">        },</span></span>
<span data-line=""><span style="color:#F8F8F2">    );</span></span>
<span data-line=""><span style="color:#FF79C6">    if</span><span style="color:#F8F8F2"> (</span><span style="color:#FF79C6">!</span><span style="color:#F8F8F2">response.ok) {</span></span>
<span data-line=""><span style="color:#FF79C6">        throw</span><span style="color:#FF79C6;font-weight:bold"> new</span><span style="color:#50FA7B"> Error</span><span style="color:#F8F8F2">(</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">Could not get OPML!</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">);</span></span>
<span data-line=""><span style="color:#F8F8F2">    }</span></span>
<span data-line=""><span style="color:#FF79C6">    const</span><span style="color:#F8F8F2"> body </span><span style="color:#FF79C6">=</span><span style="color:#FF79C6"> await</span><span style="color:#F8F8F2"> response.</span><span style="color:#50FA7B">text</span><span style="color:#F8F8F2">();</span></span>
<span data-line=""><span style="color:#FF79C6">    const</span><span style="color:#F8F8F2"> xml </span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2"> parser.</span><span style="color:#50FA7B">parse</span><span style="color:#F8F8F2">(body);</span></span>
<span data-line=""><span style="color:#FF79C6">    const</span><span style="color:#F8F8F2"> list </span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2"> xml.opml.body.outline.outline;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">    const</span><span style="color:#F8F8F2"> feeds </span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2"> list</span></span>
<span data-line=""><span style="color:#F8F8F2">        .</span><span style="color:#50FA7B">map</span><span style="color:#F8F8F2">((</span><span style="color:#FFB86C;font-style:italic">feed</span><span style="color:#F8F8F2">) </span><span style="color:#FF79C6">=&gt;</span><span style="color:#F8F8F2"> ({</span></span>
<span data-line=""><span style="color:#F8F8F2">            type</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> feed[</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">@_type</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">],</span></span>
<span data-line=""><span style="color:#F8F8F2">            title</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> feed[</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">@_text</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">],</span></span>
<span data-line=""><span style="color:#F8F8F2">            siteUrl</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> feed[</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">@_htmlUrl</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">],</span></span>
<span data-line=""><span style="color:#F8F8F2">            feedUrl</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> feed[</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">@_xmlUrl</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">],</span></span>
<span data-line=""><span style="color:#F8F8F2">        }));</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">    return</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#F8F8F2">        title</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> xml.opml.body.outline[</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">@_text</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">],</span></span>
<span data-line=""><span style="color:#F8F8F2">        feeds,</span></span>
<span data-line=""><span style="color:#F8F8F2">    };</span></span>
<span data-line=""><span style="color:#F8F8F2">};</span></span></code></pre></figure>
<section role="note" aria-label="Note" class="Blocks_info__wkiHx Blocks_post-it__gf2kM Blocks_common__p7gh9"><p>This is actually a simplified version of the code: I added types to simplify my life and I also had to <strong>rewrite the
URLs of full-text feeds for paying subscribers</strong> —such as <a href="https://www.404media.co/404-media-now-has-a-full-text-rss-feed/"><em>404
Media</em></a>— as well as filter out feeds generated by
<em>Kill the Newsletter!</em> as <strong>knowing the URL allows ill-intentioned people to send spam</strong> right into my feed.</p></section>
<p>And finally, all I had to do is create a React component that would fetch and display the feeds list with a given ID:</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="tsx" data-theme="dracula"><code data-language="tsx" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#FF79C6">const</span><span style="color:#50FA7B"> Feeds</span><span style="color:#FF79C6"> =</span><span style="color:#FF79C6"> async</span><span style="color:#F8F8F2"> ({ </span><span style="color:#FFB86C;font-style:italic">filterId</span><span style="color:#F8F8F2"> }</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> { filterId</span><span style="color:#FF79C6">:</span><span style="color:#8BE9FD;font-style:italic"> string</span><span style="color:#F8F8F2"> }) </span><span style="color:#FF79C6">=&gt;</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#FF79C6">    const</span><span style="color:#F8F8F2"> feedList </span><span style="color:#FF79C6">=</span><span style="color:#FF79C6"> await</span><span style="color:#50FA7B"> listFeeds</span><span style="color:#F8F8F2">(filterId);</span></span>
<span data-line=""><span style="color:#FF79C6">    return</span><span style="color:#F8F8F2"> (</span></span>
<span data-line=""><span style="color:#F8F8F2">        &lt;</span><span style="color:#FF79C6">section</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">            &lt;</span><span style="color:#FF79C6">h2</span><span style="color:#F8F8F2">&gt;{feedList.title}&lt;/</span><span style="color:#FF79C6">h2</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">            &lt;</span><span style="color:#FF79C6">ul</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">                {feedList.feeds.</span><span style="color:#50FA7B">map</span><span style="color:#F8F8F2">((</span><span style="color:#FFB86C;font-style:italic">feed</span><span style="color:#F8F8F2">) </span><span style="color:#FF79C6">=&gt;</span><span style="color:#F8F8F2"> (</span></span>
<span data-line=""><span style="color:#F8F8F2">                    &lt;</span><span style="color:#FF79C6">li</span><span style="color:#50FA7B;font-style:italic"> key</span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2">{feed.siteUrl}&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">                        {feed.title}: &lt;</span><span style="color:#8BE9FD;font-style:italic">Link</span><span style="color:#50FA7B;font-style:italic"> href</span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2">{feed.siteUrl}&gt;Website&lt;/</span><span style="color:#8BE9FD;font-style:italic">Link</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">                        {</span><span style="color:#6272A4">/* Only show the RSS feed URL if the website has one</span></span>
<span data-line=""><span style="color:#6272A4">                        (and hence filter out websites scrapped using HTML+XPath) */</span><span style="color:#F8F8F2">}</span></span>
<span data-line=""><span style="color:#F8F8F2">                        {feed.type </span><span style="color:#FF79C6">===</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">rss</span><span style="color:#E9F284">&quot;</span><span style="color:#FF79C6"> &amp;&amp;</span><span style="color:#F8F8F2"> (</span></span>
<span data-line=""><span style="color:#F8F8F2">                            &lt;</span><span style="color:#8BE9FD;font-style:italic">Link</span><span style="color:#50FA7B;font-style:italic"> className</span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2">{styles.feedLink} </span><span style="color:#50FA7B;font-style:italic">href</span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2">{feed.feedUrl}&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">                                RSS</span></span>
<span data-line=""><span style="color:#F8F8F2">                            &lt;/</span><span style="color:#8BE9FD;font-style:italic">Link</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">                        )}</span></span>
<span data-line=""><span style="color:#F8F8F2">                    &lt;/</span><span style="color:#FF79C6">li</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">                ))}</span></span>
<span data-line=""><span style="color:#F8F8F2">            &lt;/</span><span style="color:#FF79C6">ul</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">        &lt;/</span><span style="color:#FF79C6">section</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    );</span></span>
<span data-line=""><span style="color:#F8F8F2">};</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">export</span><span style="color:#FF79C6"> default</span><span style="color:#FF79C6"> async</span><span style="color:#FF79C6"> function</span><span style="color:#50FA7B"> FeedsPage</span><span style="color:#F8F8F2">() {</span></span>
<span data-line=""><span style="color:#FF79C6">    return</span><span style="color:#F8F8F2"> (</span></span>
<span data-line=""><span style="color:#F8F8F2">        &lt;</span><span style="color:#8BE9FD;font-style:italic">Content</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">            {</span><span style="color:#6272A4">/* ... */</span><span style="color:#F8F8F2">}</span></span>
<span data-line=""><span style="color:#F8F8F2">            &lt;</span><span style="color:#8BE9FD;font-style:italic">Suspense</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">                &lt;</span><span style="color:#8BE9FD;font-style:italic">Feeds</span><span style="color:#50FA7B;font-style:italic"> filterId</span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2">{</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">6uVqU9FkqHR6MN8VpZ96nK</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">} /&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">                &lt;</span><span style="color:#8BE9FD;font-style:italic">Feeds</span><span style="color:#50FA7B;font-style:italic"> filterId</span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2">{</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">rzyPkPhgHhuLtmTAihg27P</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">} /&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">                &lt;</span><span style="color:#8BE9FD;font-style:italic">Feeds</span><span style="color:#50FA7B;font-style:italic"> filterId</span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2">{</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">CSDPN6yYtnYDbVNbyh42Vu</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">} /&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">                &lt;</span><span style="color:#8BE9FD;font-style:italic">Feeds</span><span style="color:#50FA7B;font-style:italic"> filterId</span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2">{</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">PXEc4ePnnNfVY6hRgCyQyp</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">} /&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">            &lt;/</span><span style="color:#8BE9FD;font-style:italic">Suspense</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">        &lt;/</span><span style="color:#8BE9FD;font-style:italic">Content</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    );</span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span></code></pre></figure>
<p>Finally, I added little icons inspired by <a href="https://www.zachleat.com/web/external-link-favicons/">Zach Leatherman’s “CSS-only External Link Favicons”</a>
for the website and RSS URLs to help differentiate them. You can check out the result on <a href="https://axel.leroy.sh/feeds">/feeds</a>.</p>]]></content:encoded></item><item><title><![CDATA[An ESLint rule to require the sizes attribute for Next.js’s <Image>]]></title><description><![CDATA[A few days after publishing the new version of this website I realized that I forgot to add the sizes attribute to images contained in blog posts, resulting in Next.js serving images to users that were bigger than required. This led me to write an ESLint rule to prevent this issue from happening again.
]]></description><link>https://axel.leroy.sh/blog/eslint-rule-require-image-sizes-nextjs?utm_source=rss</link><guid isPermaLink="false">https://axel.leroy.sh/blog/eslint-rule-require-image-sizes-nextjs</guid><category><![CDATA[Web development]]></category><category><![CDATA[Next.js]]></category><category><![CDATA[React]]></category><category><![CDATA[Tips and Tricks]]></category><dc:creator><![CDATA[Axel Leroy]]></dc:creator><pubDate>Thu, 18 Jul 2024 15:50:00 GMT</pubDate><enclosure url="https://axel.leroy.sh/blog/eslint-rule-require-image-sizes-nextjs/og.jpg" length="0" type="image/jpeg"/><content:encoded><![CDATA[<link rel="preload" as="image" href="https://axel.leroy.sh/blog/eslint-rule-require-image-sizes-nextjs/og.jpg"/><p><img src="https://axel.leroy.sh/blog/eslint-rule-require-image-sizes-nextjs/og.jpg" alt=""/></p>
<p>One particularly useful trick to reduce a page’s bandwidth is to leverage <em>responsive images</em>, as I wrote in
<a href="https://axel.leroy.sh/blog/shaving-kilobytes-off-website#serve-the-right-picture-size-with-responsive-images">my article “Shaving every kilobytes possible off your website”</a>:</p>
<blockquote>
<p>Rather than having every user download a high resolution picture, you can serve a picture in different sizes and let
the browser pick the one that <strong>fits the user’s screen resolution</strong>.</p>
<p>MDN has <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images">an excellent article on the subject</a>
but the gist is to use the <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">srcset</span></span></code></span> attribute to list every picture and size […]</p>
<p>Be aware that <strong>unless</strong> you specify the picture size in relation to the screen’s width using the <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">sizes</span></span></code></span> attribute, the
browser will consider that the picture spans <strong>the entire width of the screen</strong>.</p>
</blockquote>
<p>The last paragraph is particularly important: a few days after publishing the new version of this website I realized that
I forgot to add the <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">sizes</span></span></code></span> attribute to images contained in blog posts, resulting in Next.js generating an <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">srcset</span></span></code></span> with
<strong>pictures that are 1080 and 3840 pixels wide</strong>, regardless of their device’s resolution!</p>
<p>As the Next.js documentation notes:</p>
<blockquote source="Next.js documentation" citeUrl="https://nextjs.org/docs/app/api-reference/components/image#sizes/"><p>If no <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">sizes</span></span></code></span> value is present, a small <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">srcset</span></span></code></span> is generated, suitable for a fixed-size image (1x/2x/etc). If
<span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">sizes</span></span></code></span> is defined, a large <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">srcset</span></span></code></span> is generated, suitable for a responsive image (640w/750w/etc).</p></blockquote>
<p>Following this discovery, I checked our ongoing website rewrite at work to find out that I did forget it there as well…
After fixing the issue, I came up with the following ESLint rule in order to prevent this issue from ever happening again:</p>
<!-- -->
<figure data-rehype-pretty-code-figure=""><figcaption data-rehype-pretty-code-title="" data-language="js" data-theme="dracula">.eslintrc.js</figcaption><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="js" data-theme="dracula"><code data-language="js" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#8BE9FD;font-style:italic">module</span><span style="color:#F8F8F2">.</span><span style="color:#8BE9FD;font-style:italic">exports</span><span style="color:#FF79C6"> =</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#6272A4">    /* ... */</span></span>
<span data-line=""><span style="color:#F8F8F2">    rules</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#6272A4">        /* ... */</span></span>
<span data-line=""><span style="color:#E9F284">        &quot;</span><span style="color:#F1FA8C">no-restricted-syntax</span><span style="color:#E9F284">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> [</span></span>
<span data-line=""><span style="color:#E9F284">            &quot;</span><span style="color:#F1FA8C">error</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#F8F8F2">            {</span></span>
<span data-line=""><span style="color:#F8F8F2">                selector</span><span style="color:#FF79C6">:</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">JSXElement[openingElement.name.name=&#x27;Image&#x27;]</span><span style="color:#E9F284">&quot;</span><span style="color:#FF79C6"> +</span></span>
<span data-line=""><span style="color:#E9F284">                    &quot;</span><span style="color:#F1FA8C">:not(:has(JSXAttribute[name.name=&#x27;sizes&#x27;]))</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#F8F8F2">                message</span><span style="color:#FF79C6">:</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">You must pass \`sizes\` to \`&lt;Image&gt;\` components.</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#F8F8F2">            },</span></span>
<span data-line=""><span style="color:#F8F8F2">        ],</span></span>
<span data-line=""><span style="color:#F8F8F2">    },</span></span>
<span data-line=""><span style="color:#F8F8F2">};</span></span></code></pre></figure>
<!-- -->
<p>It can be modified to work with <a href="https://github.com/Niels-IO/next-image-export-optimizer">next-image-export-optimizer</a>’s
<span data-rehype-pretty-code-figure=""><code data-language="tsx" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#8BE9FD;font-style:italic">ExportedImage</span><span style="color:#F8F8F2">&gt;</span></span></code></span> and the native <span data-rehype-pretty-code-figure=""><code data-language="html" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">img</span><span style="color:#F8F8F2">&gt;</span></span></code></span> element by replacing <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">Image</span></span></code></span> by the desired element.</p>]]></content:encoded></item><item><title><![CDATA[I rewrote my website… again, but with Next.js this time!]]></title><description><![CDATA[Some 4 months ago, while researching the stack we could use to rewrite my employer’s website, I asked myself the following question: “What if I rewrote my personal website with Next.js?”.  In this article I’ll walk through my process to build this new version, the improvements I made, what I wished had been easier.
]]></description><link>https://axel.leroy.sh/blog/website-rewrite-nextjs?utm_source=rss</link><guid isPermaLink="false">https://axel.leroy.sh/blog/website-rewrite-nextjs</guid><category><![CDATA[Blog]]></category><category><![CDATA[Personal projects]]></category><category><![CDATA[Web development]]></category><category><![CDATA[Next.js]]></category><category><![CDATA[React]]></category><dc:creator><![CDATA[Axel Leroy]]></dc:creator><pubDate>Mon, 15 Jul 2024 16:00:00 GMT</pubDate><enclosure url="https://axel.leroy.sh/blog/website-rewrite-nextjs/og.jpg" length="0" type="image/jpeg"/><content:encoded><![CDATA[<link rel="preload" as="image" href="https://axel.leroy.sh/blog/website-rewrite-nextjs/og.jpg"/><link rel="preload" as="image" href="https://axel.leroy.sh/img/nextjs-rewrite/previous-article.png"/><link rel="preload" as="image" href="https://axel.leroy.sh/img/nextjs-rewrite/new-home.png"/><link rel="preload" as="image" href="https://axel.leroy.sh/img/nextjs-rewrite/og-example.png"/><p><img src="https://axel.leroy.sh/blog/website-rewrite-nextjs/og.jpg" alt=""/></p>
<p>I haven’t touched my website that much since <a href="https://axel.leroy.sh/blog/a-clean-slate">the last time I rewrote it</a>: appart from small touch-ups
and bug fixes, the only notable change was the removal of my <a href="https://axel.leroy.sh/blog/the-making-of-photo-gallery">photography portfolio</a>
(to which I never uploaded new pictures because the process was too cumbersome).</p>
<p>But while I was evaluating frameworks two months ago for the upcoming rewrite of my employer’s website, I stumbled upon
<em>Next.js 14</em> and the concept of <em>React Server Components</em>. I was so mind-blown by the Developer Experience that I wondered:</p>
<!-- -->
<blockquote><p>Should I rewrite my website with it?</p></blockquote>
<p>Well, of course I did. But what I originally envisioned as a simple rewrite ended up being much more!
So stay with me as I share my experience as well as the few things I learned along the way.</p>
<section><h2 id="the-appeal-of-building-with-nextjs"><a aria-hidden="true" tabindex="-1" href="#the-appeal-of-building-with-nextjs"><span>#</span></a>The appeal of building with Next.js</h2><p>Besides experimenting with Next.js, I wanted to use React in order to leverage the composability of JSX components in
the layout. <em>Liquid</em> —the layout language used in <em>Jekyll</em>— is more limited and lacks proper typing: I never knew what
variables were available in a given Jekyll layout or include, whereas JSX and Typescript provide this much needed context.</p><p>I also wished to use <a href="https://mdxjs.com/">MDX</a> to include custom JSX elements in Markdown, though I have yet to use
it for components more substantial than <span data-rehype-pretty-code-figure=""><code data-language="html" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">aside</span><span style="color:#F8F8F2">&gt;</span></span></code></span>s, but I might include <a href="https://mermaid.js.org/">Mermaid</a> or
<a href="https://pintorajs.vercel.app/docs/intro/">Pintora</a> charts and interactive examples in future articles.</p><p>Finally, as crazy as it might sound —after all, it’s supposed to be <em>Next.js</em>’s big appeal—, I didn’t deploy my website
dynamicaly on a server or Vercel, opting instead for <em>Static Exports</em> (which is Next.js parlance for
<em>Static Site Generation</em>). I wanted to deploy the website the way I did before as well as take up the challenge of
building a Next.js website entirely statically.</p></section>
<section><h2 id="challenges-with-nextjss-static-exports"><a aria-hidden="true" tabindex="-1" href="#challenges-with-nextjss-static-exports"><span>#</span></a>Challenges with Next.js’s Static Exports</h2><p>The first challenge with Static Exports appears when using <em>dynamic routes</em>: in order to build pages under a specific
route, <a href="https://nextjs.org/docs/app/building-your-application/routing/dynamic-routes#generating-static-params">you have to instruct Next.js</a>
how many and which pages it has to build. For this, you’ll generally export a function
—named <span data-rehype-pretty-code-figure=""><code data-language="js" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#50FA7B">generateStaticParams</span><span style="color:#F8F8F2">()</span></span></code></span>— that will return parameters to create every possible routes. For example:</p><figure data-rehype-pretty-code-figure=""><figcaption data-rehype-pretty-code-title="" data-language="tsx" data-theme="dracula">/app/[foo]/article/[bar]/page.tsx</figcaption><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="tsx" data-theme="dracula"><code data-language="tsx" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#FF79C6">export</span><span style="color:#FF79C6"> async</span><span style="color:#FF79C6"> function</span><span style="color:#50FA7B"> generateStaticParams</span><span style="color:#F8F8F2">()</span><span style="color:#FF79C6">:</span><span style="color:#8BE9FD;font-style:italic"> Promise</span><span style="color:#F8F8F2">&lt;{</span></span>
<span data-line=""><span style="color:#F8F8F2">    foo</span><span style="color:#FF79C6">:</span><span style="color:#8BE9FD;font-style:italic"> string</span><span style="color:#F8F8F2">;</span></span>
<span data-line=""><span style="color:#F8F8F2">    bar</span><span style="color:#FF79C6">:</span><span style="color:#8BE9FD;font-style:italic"> string</span><span style="color:#F8F8F2">;</span></span>
<span data-line=""><span style="color:#F8F8F2">}&gt; {</span></span>
<span data-line=""><span style="color:#FF79C6">    const</span><span style="color:#F8F8F2"> pages </span><span style="color:#FF79C6">=</span><span style="color:#FF79C6"> await</span><span style="color:#50FA7B"> listPages</span><span style="color:#F8F8F2">();</span></span>
<span data-line=""><span style="color:#FF79C6">    return</span><span style="color:#F8F8F2"> pages.</span><span style="color:#50FA7B">map</span><span style="color:#F8F8F2">((</span><span style="color:#FFB86C;font-style:italic">page</span><span style="color:#F8F8F2">) </span><span style="color:#FF79C6">=&gt;</span><span style="color:#F8F8F2"> ({ foo</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> page.foo, bar</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> page.bar }));</span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">export</span><span style="color:#FF79C6"> default</span><span style="color:#FF79C6"> async</span><span style="color:#FF79C6"> function</span><span style="color:#50FA7B"> Page</span><span style="color:#F8F8F2">({ </span><span style="color:#FFB86C;font-style:italic">params</span><span style="color:#F8F8F2"> }</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#F8F8F2">    params</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> { foo</span><span style="color:#FF79C6">:</span><span style="color:#8BE9FD;font-style:italic"> string</span><span style="color:#F8F8F2">; bar</span><span style="color:#FF79C6">:</span><span style="color:#8BE9FD;font-style:italic"> string</span><span style="color:#F8F8F2"> }</span></span>
<span data-line=""><span style="color:#F8F8F2">}) {</span></span>
<span data-line=""><span style="color:#FF79C6">    const</span><span style="color:#F8F8F2"> content </span><span style="color:#FF79C6">=</span><span style="color:#FF79C6"> await</span><span style="color:#50FA7B"> getPage</span><span style="color:#F8F8F2">(params);</span></span>
<span data-line=""><span style="color:#FF79C6">    return</span><span style="color:#F8F8F2"> &lt;&gt;{</span><span style="color:#6272A4">/* ... */</span><span style="color:#F8F8F2">}&lt;/&gt;;</span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span></code></pre></figure><section role="note" aria-label="Note" class="Blocks_info__wkiHx Blocks_post-it__gf2kM Blocks_common__p7gh9"><p>Using <span data-rehype-pretty-code-figure=""><code data-language="js" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#50FA7B">generateStaticParams</span><span style="color:#F8F8F2">()</span></span></code></span> is generally a <em>good practise</em> outside Static Exports as it will instruct Next.js to
build as many pages as possible during build time rather than at request time. <em>Unless</em>
<a href="https://nextjs.org/docs/app/building-your-application/caching#opting-out-2">you opted out from Full Route Cache</a>.</p></section><p>In my case it was much simpler than in the example above as my route is simply <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">/blog/[slug]</span></span></code></span>: I just had to write a
function that reads every <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">.mdx</span></span></code></span> file in a folder and then returns the files’ names without their extensions ; as well
as a second function that gets the slug and returns the content of the appropriate MDX document to render the page.</p><hr/><p>The second challenge was with Next.js’s <em>Image Optimization</em>: it notably includes a <em>Size Optimization mechanism</em> that’ll
generate pictures of different sizes to use in responsive images
—which <a href="https://axel.leroy.sh/blog/shaving-kilobytes-off-website#serve-the-right-picture-size-with-responsive-images">I talked about in a previous article</a>.
Unfortunately, <a href="https://nextjs.org/docs/app/building-your-application/deploying/static-exports#image-optimization">it is not available out of the box in Static Exports</a>.</p><p>Instead, the docs instruct to define a custom loader that calls a third-party service such as Cloudinary, but fortunately
a fellow developer named <a href="https://github.com/Niels-IO">Niels</a> has developed a solution in the form
of <a href="https://github.com/Niels-IO/next-image-export-optimizer?tab=readme-ov-file#readme">next-image-export-optimizer</a>.
Its use is pretty straightforward: you replace Next.js’s <span data-rehype-pretty-code-figure=""><code data-language="jsx" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#8BE9FD;font-style:italic">Image</span><span style="color:#F8F8F2">&gt;</span></span></code></span> by the library’s <span data-rehype-pretty-code-figure=""><code data-language="jsx" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#8BE9FD;font-style:italic">ExportedImage</span><span style="color:#F8F8F2">&gt;</span></span></code></span>
(with the added bonus that their APIs are identical!) and finally you run its script after Next.js’s build to generate
pictures in the sizes you have defined in your configuration.</p></section>
<section><h2 id="other-issues-with-nextjs"><a aria-hidden="true" tabindex="-1" href="#other-issues-with-nextjs"><span>#</span></a>Other issues with Next.js</h2><p>Now, I’ll talk about issues I encountered with Next.js that are not specific to <em>Static Exports</em>.</p><section><h3 id="mdx"><a aria-hidden="true" tabindex="-1" href="#mdx"><span>##</span></a>MDX</h3><p>The first one has to do with MDX: <a href="https://nextjs.org/docs/app/building-your-application/configuring/mdx">Vercel promote their own MDX integration</a>
and paint it as a very easy to use solution: create a <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">page.mdx</span></span></code></span> file, and it will be rendered as a page! Unfortunately,
using it effectively is more convoluted:</p><ul>
<li>It does not support Frontmatter, unless you import the <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">.mdx</span></span></code></span> file in a page.</li>
<li>Because Layouts and Templates <em>cannot access information from children routes and pages</em>, you cannot display pages’
Frontmatter (i.e. title, author, publication date, etc.)</li>
</ul><p>The community recommends instead to use Hashicorp’s <a href="https://github.com/hashicorp/next-mdx-remote/"><span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">next-mdx-remote</span></span></code></span></a>,
which allows you to render MDX from a <span data-rehype-pretty-code-figure=""><code data-language="ts" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">string</span></span></code></span>, either parsed from a file or fetched remotely from a headless CMS.
It solves most of <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">@next/mdx</span></span></code></span>’s issues, but it has some of its own:</p><ul>
<li>Until very recently, it <em>did not support MDX v3</em> —which led to incompatibilities with some packages requiring this
version, including <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">remark-gfm</span></span></code></span>— nor compilation with Turbopack.</li>
<li>There is no way to only parse the Frontmatter <em>without compiling the entire MDX file</em>, which might be useful to use in
<span data-rehype-pretty-code-figure=""><code data-language="js" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#50FA7B">generateMetadata</span><span style="color:#F8F8F2">()</span></span></code></span> or to list blog posts. A solution suggested by some is to use <a href="https://github.com/jonschlinkert/gray-matter"><span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">gray-matter</span></span></code></span></a> for
that, but that’s an extra dependency.</li>
<li>The output from <span data-rehype-pretty-code-figure=""><code data-language="js" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#50FA7B">serialize</span><span style="color:#F8F8F2">()</span></span></code></span> <em>does not contain the entire <span data-rehype-pretty-code-figure=""><code data-language="ts" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">VFile</span></span></code></span></em>, which would be useful with some remark plugins
such as <a href="https://github.com/stefanprobst/rehype-extract-toc"><span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">rehype-extract-toc</span></span></code></span></a>. Yet again, it requires parsing MDX outside of <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">next-mdx-remote</span></span></code></span>.</li>
<li>Finally, it <em>does not support importing component within an MDX file</em>, which isn’t great for one-off components used
in a single file.</li>
</ul><p>Fortunately, another developer named <a href="https://github.com/ipikuka/">ipikuka</a> made a fork named <a href="https://github.com/ipikuka/next-mdx-remote-client"><span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">next-mdx-remote-client</span></span></code></span></a>
that fixes every issue I listed, especially <a href="https://github.com/ipikuka/next-mdx-remote-client#utility-getfrontmatter">parsing only the Frontmatter</a>
and <a href="https://github.com/ipikuka/next-mdx-remote-client#an-example-with-creating-a-table-of-content-toc">extracting data from the <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">VFile</span></span></code></span></a>, all with Typescript declarations!</p><section role="note" aria-label="Note" class="Blocks_info__wkiHx Blocks_post-it__gf2kM Blocks_common__p7gh9"><p>When using <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">next-mdx-remote-client</span></span></code></span>’s <span data-rehype-pretty-code-figure=""><code data-language="js" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#50FA7B">evaluate</span><span style="color:#F8F8F2">()</span></span></code></span> function, if the source MDX does not compile, <strong>it will fail
silently and return an empty component</strong> as well as an <span data-rehype-pretty-code-figure=""><code data-language="js" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">Error</span></span></code></span>.</p><p>In order for the failure to be explicit, I added this little snippet in my function evaluating MDX:</p><figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="ts" data-theme="dracula"><code data-language="ts" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#FF79C6">export</span><span style="color:#FF79C6"> async</span><span style="color:#FF79C6"> function</span><span style="color:#50FA7B"> evaluateMdx</span><span style="color:#F8F8F2">&lt;</span><span style="color:#FFB86C;font-style:italic">T</span><span style="color:#FF79C6"> extends</span><span style="color:#FFB86C;font-style:italic"> Record</span><span style="color:#F8F8F2">&lt;</span><span style="color:#8BE9FD;font-style:italic">string</span><span style="color:#F8F8F2">, </span><span style="color:#8BE9FD;font-style:italic">unknown</span><span style="color:#F8F8F2">&gt;&gt;(</span></span>
<span data-line=""><span style="color:#FFB86C;font-style:italic">    folder</span><span style="color:#FF79C6">:</span><span style="color:#8BE9FD;font-style:italic"> string</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#FFB86C;font-style:italic">    slug</span><span style="color:#FF79C6">:</span><span style="color:#8BE9FD;font-style:italic"> string</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#F8F8F2">)</span><span style="color:#FF79C6">:</span><span style="color:#8BE9FD;font-style:italic"> Promise</span><span style="color:#F8F8F2">&lt;</span><span style="color:#FFB86C;font-style:italic">EvaluateResult</span><span style="color:#F8F8F2">&lt;</span><span style="color:#FFB86C;font-style:italic">T</span><span style="color:#F8F8F2">, </span><span style="color:#FFB86C;font-style:italic">Scope</span><span style="color:#F8F8F2">&gt;&gt; {</span></span>
<span data-line=""><span style="color:#FF79C6">    const</span><span style="color:#F8F8F2"> fileContent </span><span style="color:#FF79C6">=</span><span style="color:#FF79C6"> await</span><span style="color:#50FA7B"> getFileContent</span><span style="color:#F8F8F2">(folder, slug);</span></span>
<span data-line=""><span style="color:#FF79C6">    const</span><span style="color:#F8F8F2"> result </span><span style="color:#FF79C6">=</span><span style="color:#FF79C6"> await</span><span style="color:#50FA7B"> evaluate</span><span style="color:#F8F8F2">&lt;</span><span style="color:#FFB86C;font-style:italic">T</span><span style="color:#F8F8F2">, </span><span style="color:#FFB86C;font-style:italic">Scope</span><span style="color:#F8F8F2">&gt;({</span></span>
<span data-line=""><span style="color:#F8F8F2">        source</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> fileContent,</span></span>
<span data-line=""><span style="color:#F8F8F2">        options</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> evaluateOptions,</span></span>
<span data-line=""><span style="color:#F8F8F2">        components</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> MarkdownComponents,</span></span>
<span data-line=""><span style="color:#F8F8F2">    });</span></span>
<span data-line="" data-highlighted-line=""><span style="color:#FF79C6">    if</span><span style="color:#F8F8F2"> (result.error) {</span></span>
<span data-line="" data-highlighted-line=""><span style="color:#FF79C6">        throw</span><span style="color:#F8F8F2"> result.error;</span></span>
<span data-line="" data-highlighted-line=""><span style="color:#F8F8F2">    }</span></span>
<span data-line=""><span style="color:#FF79C6">    return</span><span style="color:#F8F8F2"> result;</span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span></code></pre></figure></section></section><section><h3 id="complete-article-content-in-rss-feed"><a aria-hidden="true" tabindex="-1" href="#complete-article-content-in-rss-feed"><span>##</span></a>Complete article content in RSS feed</h3><p>With all that handled, I went on to work on the RSS feed. I, myself, am a big user of RSS —I’m currently subscribed to
114 feeds— and I always prefer when feeds contain the entire articles’ content. So it was natural to go the extra mile
in order to provide the complete experience to subscribers.</p><p>The plan was straightforward: add the <a href="https://www.npmjs.com/package/rss"><span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">rss</span></span></code></span> package</a>, create a
<a href="https://nextjs.org/docs/app/building-your-application/routing/route-handlers">Route Handler</a> to generate the XML file, iterate through the
articles, feed them to <span data-rehype-pretty-code-figure=""><code data-language="jsx" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#8BE9FD;font-style:italic">MDXRemote</span><span style="color:#F8F8F2">&gt;</span></span></code></span> in order to get a React element with the content and finally use React’s
<a href="https://react.dev/reference/react-dom/server/renderToString"><span data-rehype-pretty-code-figure=""><code data-language="js" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#50FA7B">renderToString</span><span style="color:#F8F8F2">()</span></span></code></span></a> to render the resulting HTML that will end up in the RSS feed. Easy, right?</p><p>But, yet again, it wasn’t simple as initially planned, because doing so will throw this error:</p><figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="ansi" data-theme="dracula"><code data-language="ansi" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#F8F8F2">Error:</span></span>
<span data-line=""><span style="color:#F8F8F2">  × You&#x27;re importing a component that imports react-dom/server. To fix it,</span></span>
<span data-line=""><span style="color:#F8F8F2">  │ render or return the content directly as a Server Component instead for</span></span>
<span data-line=""><span style="color:#F8F8F2">  │ perf and security.</span></span>
<span data-line=""><span style="color:#F8F8F2">  │ Learn more: https://nextjs.org/docs/getting-started/react-essentials</span></span>
<span data-line=""><span style="color:#F8F8F2">  │ import { renderToString } from &quot;react-dom/server&quot;;</span></span>
<span data-line=""><span style="color:#F8F8F2">  · ──────────────────────────────────────────────────</span></span></code></pre></figure><p>It turns out that Vercel deemed <span data-rehype-pretty-code-figure=""><code data-language="js" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#50FA7B">renderToString</span><span style="color:#F8F8F2">()</span></span></code></span> too dangerous for us mere mortal to use in Server Components
and decided to replace it with a no-op. <a href="https://github.com/vercel/next.js/discussions/58305#discussioncomment-7785006">The solution</a>
is to import from <em>Next.js</em>’s internals:</p><figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="tsx" data-theme="dracula"><code data-language="tsx" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#FF79C6">import</span><span style="color:#F8F8F2"> { renderToString } </span><span style="color:#FF79C6">from</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">next/dist/compiled/react-dom/cjs/react-dom-server-legacy.node.production</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">;</span></span></code></pre></figure><p>Unfortunately, it wasn’t the end of the road, as I encountered another error:</p><figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="ansi" data-theme="dracula"><code data-language="ansi" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#F8F8F2">GET /feed.xml 500 in 458ms</span></span>
<span data-line=""><span style="color:#F8F8F2"> ✓ Compiled in 266ms (677 modules)</span></span>
<span data-line=""><span style="color:#F8F8F2"> ⨯ Error: Element type is invalid: expected a string (for built-in components)</span></span>
<span data-line=""><span style="color:#F8F8F2">  or a class/function (for composite components) but got: object.</span></span></code></pre></figure><p>This one left me scratching my head for a long time, until I stumbled upon on <a href="https://github.com/hashicorp/next-mdx-remote/issues/353">this GitHub issue</a>
and <a href="https://github.com/dslittle22/personal-website/blob/0cae1823339f08768a2b3a04a88910e0a761b2fe/prebuild/rss.ts">this solution</a>
from <a href="https://dannylittle.com/">Danny Little</a>.</p><p>My final code looks like this:</p><figure data-rehype-pretty-code-figure=""><figcaption data-rehype-pretty-code-title="" data-language="tsx" data-theme="dracula">/src/app/feed.xml/route.tsx</figcaption><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="tsx" data-theme="dracula"><code data-language="tsx" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#FF79C6">import</span><span style="color:#F8F8F2"> { renderToString } </span><span style="color:#FF79C6">from</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">next/dist/compiled/react-dom/cjs/react-dom-server-legacy.node.production</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">;</span></span>
<span data-line=""><span style="color:#FF79C6">import</span><span style="color:#F8F8F2"> { EvaluateOptions } </span><span style="color:#FF79C6">from</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">next-mdx-remote-client/rsc</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">;</span></span>
<span data-line=""><span style="color:#FF79C6">import</span><span style="color:#F8F8F2"> { MDXComponents } </span><span style="color:#FF79C6">from</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">next-mdx-remote-client</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">;</span></span>
<span data-line=""><span style="color:#FF79C6">import</span><span style="color:#F8F8F2"> imgLinks </span><span style="color:#FF79C6">from</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">@pondorasti/remark-img-links</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">;</span></span>
<span data-line=""><span style="color:#FF79C6">import</span><span style="color:#F8F8F2"> linksAbsolute </span><span style="color:#FF79C6">from</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">remark-links-absolute</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">;</span></span>
<span data-line=""><span style="color:#FF79C6">import</span><span style="color:#F8F8F2"> RSS </span><span style="color:#FF79C6">from</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">rss</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">const</span><span style="color:#F8F8F2"> components</span><span style="color:#FF79C6">:</span><span style="color:#8BE9FD;font-style:italic"> MDXComponents</span><span style="color:#FF79C6"> =</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#F8F8F2">    </span><mark data-highlighted-chars-mark="" data-highlighted-chars="" data-chars-id="red"><span style="color:#F8F8F2">a</span><span style="color:#FF79C6">:</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">a</span><span style="color:#E9F284">&quot;</span></mark><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#F8F8F2">    Blockquote</span><span style="color:#FF79C6">:</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">blockquote</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#F8F8F2">    Warning</span><span style="color:#FF79C6">:</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">aside</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#F8F8F2">    Note</span><span style="color:#FF79C6">:</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">aside</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#F8F8F2">    Speech</span><span style="color:#FF79C6">:</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">blockquote</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#F8F8F2">};</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">const</span><span style="color:#F8F8F2"> options</span><span style="color:#FF79C6">:</span><span style="color:#8BE9FD;font-style:italic"> EvaluateOptions</span><span style="color:#FF79C6"> =</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#F8F8F2">    mdxOptions</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#F8F8F2">        rehypePlugins</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> [</span></span>
<span data-line=""><span style="color:#6272A4">            /* ... */</span></span>
<span data-line=""><span style="color:#F8F8F2">        ],</span></span>
<span data-line=""><span style="color:#F8F8F2">        remarkPlugins</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> [</span></span>
<span data-line=""><span style="color:#6272A4">            /* ... */</span></span>
<span data-line=""><span style="color:#F8F8F2">            </span><mark data-highlighted-chars-mark="" data-highlighted-chars="" data-chars-id="blue"><span style="color:#F8F8F2">[imgLinks, { absolutePath</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> process.env.</span><span style="color:#BD93F9">URL</span><span style="color:#F8F8F2"> }]</span></mark><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#F8F8F2">            </span><mark data-highlighted-chars-mark="" data-highlighted-chars="" data-chars-id="blue"><span style="color:#F8F8F2">[linksAbsolute, { baseURL</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> process.env.</span><span style="color:#BD93F9">URL</span><span style="color:#F8F8F2"> }]</span></mark><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#F8F8F2">        ],</span></span>
<span data-line=""><span style="color:#F8F8F2">    },</span></span>
<span data-line=""><span style="color:#F8F8F2">};</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">export</span><span style="color:#FF79C6"> async</span><span style="color:#FF79C6"> function</span><span style="color:#50FA7B"> GET</span><span style="color:#F8F8F2">() {</span></span>
<span data-line=""><span style="color:#FF79C6">    const</span><span style="color:#F8F8F2"> posts </span><span style="color:#FF79C6">=</span><span style="color:#FF79C6"> await</span><span style="color:#50FA7B"> getPostsFrontmatter</span><span style="color:#F8F8F2">();</span></span>
<span data-line="" data-highlighted-line="" data-highlighted-line-id="green"><span style="color:#FF79C6">    const</span><span style="color:#F8F8F2"> MDXRemote </span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2"> (</span><span style="color:#FF79C6">await</span><span style="color:#FF79C6"> import</span><span style="color:#F8F8F2">(</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">next-mdx-remote-client/rsc</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">)).MDXRemote;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">    const</span><span style="color:#F8F8F2"> feed </span><span style="color:#FF79C6">=</span><span style="color:#FF79C6;font-weight:bold"> new</span><span style="color:#50FA7B"> RSS</span><span style="color:#F8F8F2">({</span></span>
<span data-line=""><span style="color:#6272A4">        /* ... */</span></span>
<span data-line=""><span style="color:#F8F8F2">    });</span></span>
<span data-line=""><span style="color:#FF79C6">    for</span><span style="color:#F8F8F2"> (</span><span style="color:#FF79C6">let</span><span style="color:#F8F8F2"> postWithSource </span><span style="color:#FF79C6">of</span><span style="color:#F8F8F2"> posts.</span><span style="color:#50FA7B">sort</span><span style="color:#F8F8F2">((</span><span style="color:#FFB86C;font-style:italic">a</span><span style="color:#F8F8F2">, </span><span style="color:#FFB86C;font-style:italic">b</span><span style="color:#F8F8F2">) </span><span style="color:#FF79C6">=&gt;</span><span style="color:#F8F8F2"> </span></span>
<span data-line=""><span style="color:#50FA7B">        compareByPublishDate</span><span style="color:#F8F8F2">(a.frontmatter, b.frontmatter))) {</span></span>
<span data-line=""><span style="color:#FF79C6">        const</span><span style="color:#F8F8F2"> { frontmatter, strippedSource } </span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2"> postWithSource;</span></span>
<span data-line=""><span style="color:#FF79C6">        const</span><span style="color:#F8F8F2"> element </span><span style="color:#FF79C6">=</span><span style="color:#FF79C6"> </span><mark data-highlighted-chars-mark="" data-highlighted-chars="" data-chars-id="green"><span style="color:#FF79C6">await</span><span style="color:#50FA7B"> MDXRemote</span></mark><span style="color:#F8F8F2">({</span></span>
<span data-line=""><span style="color:#F8F8F2">            source</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> strippedSource,</span></span>
<span data-line=""><span style="color:#F8F8F2">            components,</span></span>
<span data-line=""><span style="color:#F8F8F2">            options,</span></span>
<span data-line=""><span style="color:#F8F8F2">        });</span></span>
<span data-line=""><span style="color:#FF79C6">        const</span><span style="color:#F8F8F2"> content </span><span style="color:#FF79C6">=</span><span style="color:#50FA7B"> renderToString</span><span style="color:#F8F8F2">(element);</span></span>
<span data-line=""><span style="color:#F8F8F2">        feed.</span><span style="color:#50FA7B">item</span><span style="color:#F8F8F2">({</span></span>
<span data-line=""><span style="color:#F8F8F2">            title</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> frontmatter.title,</span></span>
<span data-line=""><span style="color:#6272A4">            /* ... */</span></span>
<span data-line=""><span style="color:#F8F8F2">            custom_elements</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> [</span></span>
<span data-line=""><span style="color:#F8F8F2">                {</span></span>
<span data-line=""><span style="color:#E9F284">                    &quot;</span><span style="color:#F1FA8C">content:encoded</span><span style="color:#E9F284">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#F8F8F2">                        _cdata</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> content,</span></span>
<span data-line=""><span style="color:#F8F8F2">                    },</span></span>
<span data-line=""><span style="color:#F8F8F2">                },</span></span>
<span data-line=""><span style="color:#F8F8F2">            ],</span></span>
<span data-line=""><span style="color:#F8F8F2">        });</span></span>
<span data-line=""><span style="color:#F8F8F2">    }</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">    return</span><span style="color:#FF79C6;font-weight:bold"> new</span><span style="color:#50FA7B"> Response</span><span style="color:#F8F8F2">(feed.</span><span style="color:#50FA7B">xml</span><span style="color:#F8F8F2">(), {</span></span>
<span data-line=""><span style="color:#F8F8F2">        headers</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#E9F284">            &quot;</span><span style="color:#F1FA8C">Content-Type</span><span style="color:#E9F284">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">text/xml</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#F8F8F2">        },</span></span>
<span data-line=""><span style="color:#F8F8F2">    });</span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span></code></pre></figure><p>The solution (highlighted in <span id="green">green</span>)
consisted in calling <span data-rehype-pretty-code-figure=""><code data-language="jsx" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#8BE9FD;font-style:italic">MDXRemote</span><span style="color:#F8F8F2">&gt;</span></span></code></span> as a function and not as a component. This along with the part highlighted
in <span id="red">red</span> —which replaces Next’s <span data-rehype-pretty-code-figure=""><code data-language="jsx" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#8BE9FD;font-style:italic">Link</span><span style="color:#F8F8F2">&gt;</span></span></code></span> as well as my custom
components with standard HTML elements— fixed the issue!</p><p>Finally, as I use relative links to images and other pages of the website in my blog posts, I needed to rewrite those
to absolute links in order for them to work in RSS readers. For that I added a couple of remark plugins
(highlighted in <span id="blue">blue</span>) to do the transformation.</p></section></section>
<section><h2 id="css-design-and-accessibility"><a aria-hidden="true" tabindex="-1" href="#css-design-and-accessibility"><span>#</span></a>CSS, design and accessibility</h2><p>For this rewrite, I decided to part ways from Bootstrap: it has been a great crutch for the past decade, but because I
have been honing my CSS skills for the past four years and since I only used its layouts and resets on my website,
I decided to drop it entirely and write everything myself.</p><p>It was also the opportunity to learn <a href="https://github.com/css-modules/css-modules">CSS Modules</a>, which I started exploring
at work since <em>styled-components</em> do not work with React Server Components.</p><section role="note" aria-label="Note" class="Blocks_info__wkiHx Blocks_post-it__gf2kM Blocks_common__p7gh9"><p>By the way, if you’re curious as to why and what the alternatives are, I highly recommend that you read Josh W
Comeau’s <a href="https://www.joshwcomeau.com/react/css-in-rsc/">CSS in React Server Components</a>.</p></section><p>I also kept using SCSS as I wanted to re-use mixins I previously wrote to apply to different components with some variables.
If there was an improvement to make, it would be to lean more heavily on <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties">CSS variables</a>
instead of SCSS’s.</p><p>In terms of design, I wanted to keep what worked —<a href="https://www.smashingmagazine.com/2014/09/balancing-line-length-font-size-responsive-web-design/#the-ideal-measure-45-to-75-characters">65 characters-long lines</a>,
titles with anchor links, the table of contents and the terminal aesthetic— and improve on it. I particularly
wanted to improve the latter: I believe I didn’t go as far as I should on the terminal aesthetic and my previous
attempt ended up being too much grey.</p><p><img src="https://axel.leroy.sh/img/nextjs-rewrite/previous-article.png" alt="Screenshot of an article with the previous design"/></p><p>So I took the scanlines animation I previously wrote, tweaked it to make them smaller, added a blue tint and used my bloom
mixin <em>everywhere</em>: on containers, on titles, <strong>everywhere</strong>. I also took the opportunity to add something I wanted for
a long time: hero images! Adding the scanlines with transparency was a way to make text more legible while looking
cool 😎</p><p>Finally, I became more aware of accessibility and have been improving my knowledge during the past couple of
years, so it was natural for me to apply my learnings to the redesign. This mostly consisted of:</p><ul>
<li>following <a href="https://developer.mozilla.org/en-US/blog/aria-accessibility-html-landmark-roles/">Using HTML landmark roles to improve accessibility</a>
from MDN’s blog,</li>
<li>getting rid of my CSS-only toggle for mobile navigation and the table of contents in favor of the
<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/details"><span data-rehype-pretty-code-figure=""><code data-language="html" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">details</span><span style="color:#F8F8F2">&gt;</span></span></code></span></a> HTML element,</li>
<li>improving the titles’ hierarchy, like using <span data-rehype-pretty-code-figure=""><code data-language="html" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">h1</span><span style="color:#F8F8F2">&gt;</span></span></code></span> only for page titles and lower heading for the rest,</li>
<li>following user’s preference for <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-reduced-motion">reduced motion</a>
and disabling scanlines and typewriter animations accordingly,</li>
<li>and using <a href="https://github.com/jake-low/remark-sectionize#readme">a remark plugin</a> to wrap each sections of my articles
in <span data-rehype-pretty-code-figure=""><code data-language="html" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">section</span><span style="color:#F8F8F2">&gt;</span></span></code></span>s.</li>
</ul></section>
<section><h2 id="new-features-and-other-improvements"><a aria-hidden="true" tabindex="-1" href="#new-features-and-other-improvements"><span>#</span></a>New features and other improvements</h2><p>While I originally did not intend to make major improvements to the website during the rewrite, I got slightly carried
away and took advantage of the situation to implement some new features:</p><section><h3 id="categories"><a aria-hidden="true" tabindex="-1" href="#categories"><span>##</span></a>Categories</h3><p>One feature I wanted to do for a long time was introducing categories. It was possible with plugins in Jekyll, but I just
kept postponing the feature. I even initially intended ship it after publishing this blog post, but I changed my mind
when I realized I wanted to list topics I write the most about on the home page:</p><p><img src="https://axel.leroy.sh/img/nextjs-rewrite/new-home.png" alt="Screenshot of the new home page with a list of article topics"/></p><p>The implementation was fairly easy: I added a list of topics in my posts’ Frontmatter like so:</p><figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="yaml" data-theme="dracula"><code data-language="yaml" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#F8F8F2">---</span></span>
<span data-line=""><span style="color:#8BE9FD">title</span><span style="color:#FF79C6">:</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">I rewrote my website… again, but with Next.js this time!</span><span style="color:#E9F284">&quot;</span></span>
<span data-line=""><span style="color:#8BE9FD">info</span><span style="color:#FF79C6">:</span></span>
<span data-line=""><span style="color:#6272A4">    # ...</span></span>
<span data-line=""><span style="color:#8BE9FD">    topics</span><span style="color:#FF79C6">:</span></span>
<span data-line=""><span style="color:#FF79C6">        -</span><span style="color:#F1FA8C"> Web development</span></span>
<span data-line=""><span style="color:#FF79C6">        -</span><span style="color:#F1FA8C"> Blog</span></span>
<span data-line=""><span style="color:#FF79C6">        -</span><span style="color:#F1FA8C"> Personal projects</span></span>
<span data-line=""><span style="color:#FF79C6">        -</span><span style="color:#F1FA8C"> Next.js</span></span>
<span data-line=""><span style="color:#FF79C6">        -</span><span style="color:#F1FA8C"> React</span></span>
<span data-line=""><span style="color:#F8F8F2">---</span></span></code></pre></figure><p>And then, depending on where topics were shown, I either directly iterated through them or I iterated through all the blog
posts first and then extracted the topics from the Frontmatter.</p></section><section><h3 id="new-writing-blocks"><a aria-hidden="true" tabindex="-1" href="#new-writing-blocks"><span>##</span></a>New writing blocks</h3><p>I had some fun reworking my <span data-rehype-pretty-code-figure=""><code data-language="html" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">blockquote</span><span style="color:#F8F8F2">&gt;</span></span></code></span> element as well as creating a new <span data-rehype-pretty-code-figure=""><code data-language="jsx" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#8BE9FD;font-style:italic">Speech</span><span style="color:#F8F8F2">&gt;</span></span></code></span> element and a couple
of styled <span data-rehype-pretty-code-figure=""><code data-language="html" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">section</span><span style="color:#F8F8F2">&gt;</span></span></code></span>s that replace Bootstrap’s old alerts:</p><blockquote>
<p>This is a <span data-rehype-pretty-code-figure=""><code data-language="html" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">blockquote</span><span style="color:#F8F8F2">&gt;</span></span></code></span></p>
</blockquote><blockquote><p>This is a speech bubble that conveys a question from the reader or someone else. This is a <span data-rehype-pretty-code-figure=""><code data-language="html" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">blockquote</span><span style="color:#F8F8F2">&gt;</span></span></code></span>
under the hood.</p></blockquote><blockquote><p>This is a speech bubble that conveys something that I —<em>the author</em>— would say or answer.</p><p>And shout-out to <a href="https://css-articles.com/">Temani Afif</a> for his <a href="https://css-shape.com/">CSS Shape</a> website from which I made these speech
bubbles.</p></blockquote><section role="note" aria-label="Note" class="Blocks_info__wkiHx Blocks_post-it__gf2kM Blocks_common__p7gh9"><p>A <span data-rehype-pretty-code-figure=""><code data-language="html" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">section</span><span style="color:#F8F8F2">&gt;</span></span></code></span> to convey additional information that looks like a Post-It note.</p><p>This one is inspired by <a href="https://nicolasgallagher.com/pure-css-folded-corner-effect/">this blog post from Nicolas Gallagher</a>.</p></section><section role="note" aria-label="Warning" class="Blocks_warning__PLH_J Blocks_post-it__gf2kM Blocks_common__p7gh9"><p>An <span data-rehype-pretty-code-figure=""><code data-language="html" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">section</span><span style="color:#F8F8F2">&gt;</span></span></code></span> to convey warning that looks like a Post-It note.</p></section></section><section><h3 id="code-blocks"><a aria-hidden="true" tabindex="-1" href="#code-blocks"><span>##</span></a>Code blocks</h3><p>Directly linked to writing are the code-blocks: I used and intend to use code examples in many of my blog posts, and
previously I was using <a href="https://highlightjs.org/">highlight.js</a>. It served me well, but it required loading extraneous
JS on the client and wasn’t very customizable outside of themes.</p><p>One of MDX’s benefits I haven’t mentioned yet is its native integration of <a href="https://github.com/rehypejs/rehype/tree/main">rehype</a>:
you can leverage its massive plugins ecosystem to transform the HTML output from MDX server-side. And one of these plugins
is <a href="https://rehype-pretty.pages.dev/">rehyped-pretty-code</a>.</p><blockquote source="rehype-pretty-code" citeUrl="https://rehype-pretty.pages.dev/"><p><span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">rehype-pretty-code</span></span></code></span> is a Rehype plugin powered by the <a href="https://github.com/shikijs/shiki">shiki</a> syntax highlighter
that provides beautiful code blocks for Markdown or MDX. It works on both the server at build-time (avoiding runtime
syntax highlighting) and on the client for dynamic highlighting.</p></blockquote><p>It has many useful features that you already have seen in this blog posts: lines and words highlighting, displaying file
names, languages and line numbers… It allows me to format code examples in a way I couldn’t before and I took the
opportunity to go over my previous blog posts to improve them!</p></section><section><h3 id="comments-powered-by-the-fediverse"><a aria-hidden="true" tabindex="-1" href="#comments-powered-by-the-fediverse"><span>##</span></a>Comments powered by the Fediverse</h3><p>Since moving away from WordPress, my blog has lacked comments: at that moment the only solution for statically generated
websites was <em>Disqus</em>, but I was never at ease with <a href="https://en.wikipedia.org/wiki/Disqus#Criticism,_privacy,_and_security_concerns">its privacy implications</a>.</p><p>I originally thought of using <a href="https://giscus.app/">Giscus</a> which leverages GitHub’s Issues to store comments. But I was
not comfortable using it either, as it would force visitors to register an account on a platform that part of the
community frowns upon (and rightly so).</p><p>And then I remembered that some people use <em>Mastodon</em> as a comments system: after all, its API is public, very easy to use
and —<em>critically</em>— allows for <a href="https://developer.mozilla.org/fr/docs/Web/HTTP/CORS">CORS</a>!</p><p>Using Mastodon also has the benefit of <strong>not restricting visitors to a single closed platform</strong>, as you can interact from
other <a href="https://en.wikipedia.org/wiki/ActivityPub">ActivityPub</a>-powered platforms such as Pleroma, Calkey/Firefish,
Lemmy, Kbin and others.</p><p>All I would have to do in order to have comments is to post a <em>toot</em> —Mastodon’s equivalent for a tweet— for every
new blog post and then fetch and display replies to it.</p><p>The details are not that exciting: given a toot URL filled in the Frontmatter, I use a regex to extract the instance URL
and toot ID, then call the <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">/api/v1/statuses/:id/context</span></span></code></span> endpoint which returns the toot(s) it replies to as well as
every reply to it. Finally, I iterated over the replies to render them under the post.</p><section role="note" aria-label="Note" class="Blocks_info__wkiHx Blocks_post-it__gf2kM Blocks_common__p7gh9"><p>You might wonder <strong>how can I moderate the comments</strong> since that would normally be left to the instance’s admins. Well,
it turns out that when the request is authenticated, posts from blocked users are automatically filtered out!</p><p>Obviously, that requires to call the API from the backend rather than from the frontend in order to not leak the
API key, but it’s something that’s easily done in Next.js using a Route Handler or a Server Component.</p></section></section><section><h3 id="dynamic-opengraph-images"><a aria-hidden="true" tabindex="-1" href="#dynamic-opengraph-images"><span>##</span></a>Dynamic OpenGraph images</h3><p>One aspect to not neglect when crafting pages meant to be shared on social networks is <em>OpenGraph</em>: it’s a markup initially
promoted by Meta that allows for “rich previews”, usually with a picture, title, description, etc. in order to entice
users to click on a link.</p><p>I previously used my profile picture as the OpenGraph image, but I admit that it was more of a stopgap as it does not
convey the content of the page. This time I wanted to leverage Next.js built-in
<a href="https://nextjs.org/docs/app/building-your-application/optimizing/metadata#dynamic-image-generation"><span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">ImageResponse</span></span></code></span></a>,
which is an API that allows <em>to dynamically generate images using JSX</em>.</p><p>My first thought was to re-use the component I made for the article header / hero image, but then I encountered my first
issue: <em>it does not accept any random JSX</em>. Specifically: it only accepts JSX with in-line styles (i.e. I cannot reuse my CSS
classes) and everything has to be in a flexbox with only a subset of CSS properties supported.</p><p>After I wrote a specific component for <em>Satori</em> —the underlying library to generate pictures from
HTML— to use, I had a second issue: how can I display my hero images? You can either use an external image —which won’t work
in my case— or provide a <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs">Data URL</a> containing
the base64-encoded image, which is the way I went:</p><figure data-rehype-pretty-code-figure=""><figcaption data-rehype-pretty-code-title="" data-language="tsx" data-theme="dracula">social-image.tsx</figcaption><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="tsx" data-theme="dracula"><code data-language="tsx" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#FF79C6">export</span><span style="color:#FF79C6"> const</span><span style="color:#50FA7B"> generateSocialImage</span><span style="color:#FF79C6"> =</span><span style="color:#FF79C6"> async</span><span style="color:#F8F8F2"> (</span><span style="color:#FFB86C;font-style:italic">meta</span><span style="color:#FF79C6">:</span><span style="color:#8BE9FD;font-style:italic"> ContentMeta</span><span style="color:#F8F8F2">) </span><span style="color:#FF79C6">=&gt;</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#FF79C6">    let</span><span style="color:#F8F8F2"> heroImage;</span></span>
<span data-line=""><span style="color:#FF79C6">    if</span><span style="color:#F8F8F2"> (meta.info?.heroImage) {</span></span>
<span data-line=""><span style="color:#FF79C6">        const</span><span style="color:#F8F8F2"> filePath </span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2"> path.</span><span style="color:#50FA7B">join</span><span style="color:#F8F8F2">(</span><span style="color:#50FA7B">fileURLToPath</span><span style="color:#F8F8F2">(</span><span style="color:#FF79C6">import</span><span style="color:#F8F8F2">.meta.url), </span><span style="color:#F1FA8C">\`../../../public</span><span style="color:#FF79C6">$\{</span><span style="color:#F8F8F2">meta.info.heroImage.url</span><span style="color:#FF79C6">}</span><span style="color:#F1FA8C">\`</span><span style="color:#F8F8F2">);</span></span>
<span data-line=""><span style="color:#FF79C6">        const</span><span style="color:#F8F8F2"> heroImageBuffer </span><span style="color:#FF79C6">=</span><span style="color:#FF79C6"> await</span><span style="color:#F8F8F2"> fs.</span><span style="color:#50FA7B">readFile</span><span style="color:#F8F8F2">(filePath);</span></span>
<span data-line="" data-highlighted-line=""><span style="color:#F8F8F2">        heroImage </span><span style="color:#FF79C6">=</span><span style="color:#F1FA8C"> \`data:image/jpeg;base64,</span><span style="color:#FF79C6">$\{</span><span style="color:#F8F8F2">heroImageBuffer.</span><span style="color:#50FA7B">toString</span><span style="color:#F8F8F2">(</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">base64</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">)</span><span style="color:#FF79C6">}</span><span style="color:#F1FA8C">\`</span><span style="color:#F8F8F2">;</span></span>
<span data-line=""><span style="color:#F8F8F2">    }</span></span>
<span data-line=""><span style="color:#6272A4">    /* ... */</span></span>
<span data-line=""><span style="color:#FF79C6">    return</span><span style="color:#FF79C6;font-weight:bold"> new</span><span style="color:#50FA7B"> ImageResponse</span><span style="color:#F8F8F2">(</span></span>
<span data-line=""><span style="color:#F8F8F2">        (</span></span>
<span data-line=""><span style="color:#F8F8F2">            &lt;</span><span style="color:#FF79C6">div</span><span style="color:#50FA7B;font-style:italic"> style</span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2">{{ display</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> flex }}&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">                {heroImage </span><span style="color:#FF79C6">&amp;&amp;</span><span style="color:#F8F8F2"> (</span></span>
<span data-line=""><span style="color:#F8F8F2">                    &lt;</span><span style="color:#FF79C6">img</span></span>
<span data-line="" data-highlighted-line=""><span style="color:#50FA7B;font-style:italic">                        src</span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2">{heroImage}</span></span>
<span data-line=""><span style="color:#50FA7B;font-style:italic">                        style</span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2">{</span></span>
<span data-line=""><span style="color:#F8F8F2">                            {</span></span>
<span data-line=""><span style="color:#6272A4">                                /* ... */</span></span>
<span data-line=""><span style="color:#F8F8F2">                            }</span></span>
<span data-line=""><span style="color:#F8F8F2">                        }</span></span>
<span data-line=""><span style="color:#F8F8F2">                    /&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">                )}</span></span>
<span data-line=""><span style="color:#F8F8F2">                {</span><span style="color:#6272A4">/* ... */</span><span style="color:#F8F8F2">}</span></span>
<span data-line=""><span style="color:#F8F8F2">            &lt;/</span><span style="color:#FF79C6">div</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">        ),</span></span>
<span data-line=""><span style="color:#F8F8F2">    );</span></span>
<span data-line=""><span style="color:#F8F8F2">};</span></span></code></pre></figure><section role="note" aria-label="Warning" class="Blocks_warning__PLH_J Blocks_post-it__gf2kM Blocks_common__p7gh9"><p><strong>Heads-up:</strong> the MIME Type for JPEG images is <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">jpeg</span></span></code></span>, not <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">jpg</span></span></code></span>! I got stuck on a cryptic error for months only
because my Data URI was malformed…</p></section><p>With a few tweaks, the end result looks like that:</p><p><img src="https://axel.leroy.sh/img/nextjs-rewrite/og-example.png" alt="The hero image is in the background, with scan-lines overlayed on top. My profile picture is at the top while the article&#x27;s title with a white glow is at the bottom"/></p></section></section>
<section><h2 id="closing-words"><a aria-hidden="true" tabindex="-1" href="#closing-words"><span>#</span></a>Closing words</h2><p>This rewrite has been a long labor of love that spanned over four months and nearly 200 commits —including many versions
of this article— totalling over 13,000 new lines of code and 4,000 deleted. And yet, this is still an ongoing project
as I still have some new features in mind as well as some further optimizations to do.</p><p>It is also what I hope a return to my blogging-focused roots: while as a teenager I blogged a lot —sharing my opinion,
music I liked and writing reviews— I unfortunately lost this habit, preferring to share on social media instead. With
the slow death of social media, I realized that blogs are now more important than ever and that I should really spend
the time to write long-form articles rather than simply <del>retweeting</del> boosting interesting links and posting small and
shallow <del>tweets</del> toots.</p><p>So you should definitely watch this space —or better yet, <a href="https://axel.leroy.sh/feed.xml">subscribe to the RSS feed</a>— because I already
have listed some topics I will write about in the coming weeks and months —some React tips I learned, self-hosting
tutorials and lists of resources that might be useful to other people.</p><p>See you soon,</p><p>Axel</p></section>]]></content:encoded></item><item><title><![CDATA[Shaving every kilobytes possible off your website]]></title><description><![CDATA[So you've built your brand-new website: it’s neat, tidy and you've put all your heart and soul into it,  but have you put any thought on its bandwidth consumption?
]]></description><link>https://axel.leroy.sh/blog/shaving-kilobytes-off-website?utm_source=rss</link><guid isPermaLink="false">https://axel.leroy.sh/blog/shaving-kilobytes-off-website</guid><category><![CDATA[Tips and tricks]]></category><category><![CDATA[Web development]]></category><category><![CDATA[CSS]]></category><dc:creator><![CDATA[Axel Leroy]]></dc:creator><pubDate>Sat, 30 May 2020 17:05:00 GMT</pubDate><enclosure url="https://axel.leroy.sh/blog/shaving-kilobytes-off-website/og.jpg" length="0" type="image/jpeg"/><content:encoded><![CDATA[<link rel="preload" as="image" href="https://axel.leroy.sh/blog/shaving-kilobytes-off-website/og.jpg"/><p><img src="https://axel.leroy.sh/blog/shaving-kilobytes-off-website/og.jpg" alt=""/></p>
<p>So you’ve built your brand-new website: it’s neat, tidy and you’ve put all your heart and soul into it, but have you
put any thought on its bandwidth consumption?</p>
<!-- -->
<blockquote><p>Why would I care about its bandwidth, doesn’t almost everybody has a high-speed Internet connection?</p></blockquote>
<p>Well, let me explain why you should and give you a few tips on <strong>how to shave every kilobytes off your website</strong>’s bandwidth!</p>
<section><h2 id="why-you-should-care-about-bandwidth-in-2020"><a aria-hidden="true" tabindex="-1" href="#why-you-should-care-about-bandwidth-in-2020"><span>#</span></a>Why you should care about bandwidth in 2020</h2><p>While you may be reading this blog at your desk with the comfort of your home’s fiber connection, you have to realize
that nowadays <a href="https://gs.statcounter.com/platform-market-share/desktop-mobile-tablet">more than half of Internet traffic comes from smartphones</a>
and possibly <strong>over a mobile network</strong>: 4G if you are in a dense area, 3G or even EDGE otherwise.</p><p>Then bandwidth has a <a href="https://developers.google.com/web/fundamentals/performance/why-performance-matters/">major implication on mobile users’ experience</a>:
your website may take ages to load because of its assets’ size, which in turn will frustrate your users!</p><p>Finally, if you serve your content through a paid CDN such as AWS CloudFront, reducing your website’s size will translate
to <em>cheaper bills</em>.</p></section>
<section><h2 id="my-tips-for-reducing-your-websites-size"><a aria-hidden="true" tabindex="-1" href="#my-tips-for-reducing-your-websites-size"><span>#</span></a>My tips for reducing your website’s size</h2><section role="note" aria-label="Note" class="Blocks_info__wkiHx Blocks_post-it__gf2kM Blocks_common__p7gh9"><p>I will often use Jekyll and AWS Cloudfront as examples in this article, but my tips apply to every website, <em>static
or not</em>.</p></section><section><h3 id="css-stylesheets-and-javascript"><a aria-hidden="true" tabindex="-1" href="#css-stylesheets-and-javascript"><span>##</span></a>CSS stylesheets and Javascript</h3><p>As they have the most significant impact on your website’s user experience, we will first take a look at CSS stylesheets
and Javascript: until these assets are loaded, <em>users won’t be able to interact with your website</em>.</p><section><h4 id="load-the-right-css-rules-and-javascript-files-for-the-right-page"><a aria-hidden="true" tabindex="-1" href="#load-the-right-css-rules-and-javascript-files-for-the-right-page"><span>###</span></a>Load the right CSS rules and Javascript files for the right page</h4><p>Most of the time, your website is composed of different type of pages: for example, this website is divided between
its <em>homepage</em>, <em>blog</em> and <em>photo gallery</em>, each with their respective layouts and stylings.</p><p>Then, it makes sense to <strong>divide their respective stylesheets and scripts</strong> in different files that you add only to the pages
that need them.</p><p>Using my website as an example, I have a main stylesheet containing Bootstrap and common CSS rules, and then I use
<a href="https://jekyllrb.com/docs/front-matter/">Front Matter</a> to specify if a page makes use of custom CSS stylesheets or some
JS library:</p><figure data-rehype-pretty-code-figure=""><figcaption data-rehype-pretty-code-title="" data-language="markdown" data-theme="dracula">_layouts/post.html</figcaption><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="markdown" data-theme="dracula"><code data-language="markdown" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#F8F8F2">---</span></span>
<span data-line=""><span style="color:#8BE9FD">layout</span><span style="color:#FF79C6">:</span><span style="color:#F1FA8C"> default</span></span>
<span data-line="" data-highlighted-line=""><span style="color:#8BE9FD">extraCss</span><span style="color:#FF79C6">:</span><span style="color:#F1FA8C"> /assets/css/blog.css</span></span>
<span data-line=""><span style="color:#F8F8F2">---</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6272A4">&lt;!-- Page content --&gt;</span></span></code></pre></figure><figure data-rehype-pretty-code-figure=""><figcaption data-rehype-pretty-code-title="" data-language="markdown" data-theme="dracula">_posts/2020-06-01-some-blog-post.md</figcaption><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="markdown" data-theme="dracula"><code data-language="markdown" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#F8F8F2">---</span></span>
<span data-line=""><span style="color:#8BE9FD">layout</span><span style="color:#FF79C6">:</span><span style="color:#F1FA8C"> post</span></span>
<span data-line=""><span style="color:#8BE9FD">title</span><span style="color:#FF79C6">:</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">Some blog post</span><span style="color:#E9F284">&quot;</span></span>
<span data-line="" data-highlighted-line=""><span style="color:#8BE9FD">highlight</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9"> true</span></span>
<span data-line=""><span style="color:#F8F8F2">---</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6272A4">&lt;!-- Post content --&gt;</span></span></code></pre></figure><figure data-rehype-pretty-code-figure=""><figcaption data-rehype-pretty-code-title="" data-language="html" data-theme="dracula">_layouts/default.html</figcaption><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="html" data-theme="dracula"><code data-language="html" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#F8F8F2">{% raw %}</span></span>
<span data-line=""><span style="color:#6272A4">&lt;!-- [...] --&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">head</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#6272A4">    &lt;!-- [...] --&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">link</span><span style="color:#50FA7B;font-style:italic"> rel</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">stylesheet</span><span style="color:#E9F284">&quot;</span><span style="color:#50FA7B;font-style:italic"> href</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">/public/css/main.css</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2"> /&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    {% if page.extraCss %}</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">link</span><span style="color:#50FA7B;font-style:italic"> rel</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">stylesheet</span><span style="color:#E9F284">&quot;</span><span style="color:#50FA7B;font-style:italic"> href</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">{{ page.extraCss }}</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2"> /&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    {% endif %} {% if layout.extraCss %}</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">link</span><span style="color:#50FA7B;font-style:italic"> rel</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">stylesheet</span><span style="color:#E9F284">&quot;</span><span style="color:#50FA7B;font-style:italic"> href</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">{{ layout.extraCss }}</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2"> /&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    {% endif %} {% if page.highlight %}</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">link</span><span style="color:#50FA7B;font-style:italic"> rel</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">stylesheet</span><span style="color:#E9F284">&quot;</span><span style="color:#50FA7B;font-style:italic"> href</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.18.1/styles/xcode.min.css</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2"> /&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    {% endif %}</span></span>
<span data-line=""><span style="color:#6272A4">    &lt;!-- [...] --&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">head</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">body</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#6272A4">    &lt;!-- [...] --&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    {% if page.highlight %}</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">script</span><span style="color:#50FA7B;font-style:italic"> src</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">//cdnjs.cloudflare.com/ajax/libs/highlight.js/9.18.1/highlight.min.js</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">&gt;&lt;/</span><span style="color:#FF79C6">script</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">script</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">        hljs.</span><span style="color:#50FA7B">initHighlightingOnLoad</span><span style="color:#F8F8F2">();</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;/</span><span style="color:#FF79C6">script</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    {% endif %}</span></span>
<span data-line=""><span style="color:#6272A4">    &lt;!-- [...] --&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">body</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">{% endraw %}</span></span></code></pre></figure><p>For specific Javascript files such as the ones from the photo gallery, I simply add them at the end of the page’s <span data-rehype-pretty-code-figure=""><code data-language="html" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">body</span><span style="color:#F8F8F2">&gt;</span></span></code></span>.</p><section><h5 id="single-page-applications-use-route-level-code-splitting"><a aria-hidden="true" tabindex="-1" href="#single-page-applications-use-route-level-code-splitting"><span>####</span></a>Single Page Applications: Use route-level code splitting</h5><p>Speaking of the photo gallery, that leads me to <em>Single Page Applications</em> (SPAs).</p><p>Typically all of their code and CSS is bundled into a single fat JS file: this means that when users load a specific
page of your application, <em>they also download code for every other pages</em>. Not very efficient, right?</p><p>This is why every frontend frameworks have introduced <strong>route-level code splitting</strong>: your app is split in modules that are
automatically lazy-loaded when the user navigates to a <em>specific route</em>.</p><p>Please note that while it can dramatically cut down the initial download size, on smaller apps it can slightly increase
launch time: the browser has to download the main module, initialize the app and then download the module corresponding
to the current route.</p><p>Finally: unless you make use of <em>preloading</em>, it will also make first navigation from a module to another slightly slower
as the browser will download the module when navigation is initiated.</p></section></section><section><h4 id="remove-unused-css-rules-using-purgecss"><a aria-hidden="true" tabindex="-1" href="#remove-unused-css-rules-using-purgecss"><span>###</span></a>Remove unused CSS rules using PurgeCSS</h4><p>Nowadays, most of us build websites using CSS frameworks. Why would you do otherwise? They are great at getting started,
makes your site look good with minimal effort and handle most use-cases!</p><p>But do you use all the features the framework offers? Certainly not, so <em>why</em> would you send <em>all these unused CSS
rules</em> to your users, wasting so many precious kilobytes?</p><p>To remedy this situation, you can use <a href="https://purgecss.com/">PurgeCSS</a>: this utility scans your HTML and CSS in order
to <strong>remove CSS rules you do not use</strong>. There are even plugins for <a href="https://github.com/mhanberg/jekyll-purgecss">Jekyll</a>
and most popular build tools (PostCSS, Webpack, Gulp, etc.).</p><section role="note" aria-label="Note" class="Blocks_info__wkiHx Blocks_post-it__gf2kM Blocks_common__p7gh9"><p><span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">jekyll-purgecss</span></span></code></span> will look for the <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">purgecss</span></span></code></span> executable in <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">./node_modules/purgecss</span></span></code></span>, so you must install it
locally rather than globally (use <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">npm i -D purgecss</span></span></code></span>).</p></section></section><section><h4 id="minify-your-assets"><a aria-hidden="true" tabindex="-1" href="#minify-your-assets"><span>###</span></a>Minify your assets</h4><p>Another way to further reduce your stylesheets’ and scripts’ size is <strong>minification</strong>:</p><blockquote citeUrl="https://en.wikipedia.org/wiki/Minification_(programming)" source="Wikipedia"><p><strong>Minification</strong> (also <strong>minimisation</strong> or <strong>minimization</strong>) is the process of removing all unnecessary characters
from the source code of interpreted programming languages or markup languages without changing its functionality.
These unnecessary characters usually include white space characters, new line characters, comments, and sometimes
block delimiters, which are used to add readability to the code but are not required for it to execute. Minification
reduces the size of the source code, making its transmission over a network (e.g. the Internet) more efficient.</p></blockquote><p>There are different ways to minify you stylesheets and Javascript files: you can either use a minifier such as
<a href="https://www.minifier.org/">Minify</a> or configure your build tools (such as Webpack or SASS) to do it for you.</p><p>For example, minifying your stylesheets in Jekyll is as simple as adding these two lines in your <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">_config.yml</span></span></code></span>:</p><figure data-rehype-pretty-code-figure=""><figcaption data-rehype-pretty-code-title="" data-language="yml" data-theme="dracula">_config.yml</figcaption><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="yml" data-theme="dracula"><code data-language="yml" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#8BE9FD">sass</span><span style="color:#FF79C6">:</span></span>
<span data-line=""><span style="color:#8BE9FD">    style</span><span style="color:#FF79C6">:</span><span style="color:#F1FA8C"> compressed</span></span></code></pre></figure><hr/></section></section><section><h3 id="pictures"><a aria-hidden="true" tabindex="-1" href="#pictures"><span>##</span></a>Pictures</h3><p>After having seen how to reduce the size of your stylesheets and Javascript files, we will now take a look at pictures.
<strong>They easily are the biggest consumer of bandwidth</strong>: depending on resolution and compression, they can weight from <em>a
dozen kilobytes</em> to <em>tens of megabytes</em>!</p><section><h4 id="serve-the-right-picture-size-with-responsive-images"><a aria-hidden="true" tabindex="-1" href="#serve-the-right-picture-size-with-responsive-images"><span>###</span></a>Serve the right picture size with responsive images</h4><p>Rather than having every user download a high resolution picture, you can serve a picture in different sizes and let
the browser pick the one that <em>fits the user’s screen resolution</em>.</p><p>MDN has <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images">an excellent article on the subject</a>
but the gist is to use the <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">srcset</span></span></code></span> attribute to list every picture and size, like this:</p><figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="html" data-theme="dracula"><code data-language="html" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">img</span></span>
<span data-line=""><span style="color:#50FA7B;font-style:italic">    srcset</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">picture-480.jpg 480w, picture-800.jpg 800w</span><span style="color:#E9F284">&quot;</span></span>
<span data-line=""><span style="color:#50FA7B;font-style:italic">    src</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">picture-default.jpg</span><span style="color:#E9F284">&quot;</span></span>
<span data-line=""><span style="color:#50FA7B;font-style:italic">    alt</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">Look, a responsive picture</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2"> /&gt;</span></span></code></pre></figure><p>Be aware that <em>unless</em> you specify the picture size in relation to the screen’s width using the <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">sizes</span></span></code></span> attribute, the
browser will consider that the picture spans <em>the entire width of the screen</em>.</p><p>For example, here is how you would define <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">sizes</span></span></code></span> for pictures that span the entire width of
<a href="https://getbootstrap.com/docs/4.5/layout/overview/#containers">Bootstrap’s container</a>:</p><figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="html" data-theme="dracula"><code data-language="html" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">img</span></span>
<span data-line=""><span style="color:#50FA7B;font-style:italic">    srcset</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">picture-1110.jpg 1110w,</span></span>
<span data-line=""><span style="color:#F1FA8C">            picture-930.jpg 930w,</span></span>
<span data-line=""><span style="color:#F1FA8C">            picture-690.jpg 690w,</span></span>
<span data-line=""><span style="color:#F1FA8C">            picture-510.jpg 510w,</span></span>
<span data-line=""><span style="color:#F1FA8C">            picture-350.jpg</span><span style="color:#E9F284">&quot;</span></span>
<span data-line="" data-highlighted-line=""><span style="color:#50FA7B;font-style:italic">    sizes</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">(min-width: 1200px) 1110px,</span></span>
<span data-line="" data-highlighted-line=""><span style="color:#F1FA8C">            (min-width: 992px) 930px,</span></span>
<span data-line="" data-highlighted-line=""><span style="color:#F1FA8C">            (min-width: 768px) 690px,</span></span>
<span data-line="" data-highlighted-line=""><span style="color:#F1FA8C">            (min-width: 576px) 510px,</span></span>
<span data-line="" data-highlighted-line=""><span style="color:#F1FA8C">            calc(100vw - 30px)</span><span style="color:#E9F284">&quot;</span></span>
<span data-line=""><span style="color:#50FA7B;font-style:italic">    src</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">picture-default.jpg</span><span style="color:#E9F284">&quot;</span></span>
<span data-line=""><span style="color:#50FA7B;font-style:italic">    alt</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">Look, a responsive picture</span><span style="color:#E9F284">&quot;</span></span>
<span data-line=""><span style="color:#F8F8F2">/&gt;</span></span></code></pre></figure><p>If you are using Jekyll, I recommend you use the incredibly useful <a href="https://github.com/wildlyinaccurate/jekyll-responsive-image">jekyll-responsive-image</a>
along with <a href="https://gist.github.com/axeleroy/273e6a6eb0eb68c8dad1f80c4d45303e">this custom plugin I wrote</a>:
it will look for every picture referenced in Markdown documents and automatically resize and replace them with responsive images!</p><blockquote><p>What about pictures used as backgrounds?</p></blockquote><p>The same principle applies, but using <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries">media-queries</a> this time:</p><figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="css" data-theme="dracula"><code data-language="css" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#FF79C6">@media</span><span style="color:#F8F8F2"> (</span><span style="color:#8BE9FD">min-width</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9"> 1200</span><span style="color:#FF79C6">px</span><span style="color:#F8F8F2">) {</span></span>
<span data-line=""><span style="color:#FF79C6">    element</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#8BE9FD">        background</span><span style="color:#FF79C6">:</span><span style="color:#8BE9FD"> url</span><span style="color:#F8F8F2">(</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">picture-1110.jpg</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">);</span></span>
<span data-line=""><span style="color:#F8F8F2">    }</span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span>
<span data-line=""><span style="color:#FF79C6">@media</span><span style="color:#F8F8F2"> (</span><span style="color:#8BE9FD">min-width</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9"> 992</span><span style="color:#FF79C6">px</span><span style="color:#F8F8F2">) {</span></span>
<span data-line=""><span style="color:#FF79C6">    element</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#8BE9FD">        background</span><span style="color:#FF79C6">:</span><span style="color:#8BE9FD"> url</span><span style="color:#F8F8F2">(</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">picture-930.jpg</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">);</span></span>
<span data-line=""><span style="color:#F8F8F2">    }</span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span></code></pre></figure></section><section><h4 id="make-your-pictures-even-lighter-without-sacrificing-quality-using-webp"><a aria-hidden="true" tabindex="-1" href="#make-your-pictures-even-lighter-without-sacrificing-quality-using-webp"><span>###</span></a>Make your pictures even lighter without sacrificing quality using WebP</h4><p>In 2010 Google announced its <a href="https://en.wikipedia.org/wiki/WebP">WebP</a> lossy <em>and</em> lossless image format based on its VP8 video codec. Using WebP over
JPEG results in <a href="https://developers.google.com/speed/webp/docs/webp_lossless_alpha_study#results">25 to 34% smaller files</a> according to Google.</p><p>Except for Safari and Internet Explorer, WebP is supported by <a href="https://caniuse.com/#search=webp">every major web browsers</a>,
which means that <sup>3</sup>⁄<sub>4</sub> of your users can benefit of lower pictures size!</p><p>The best thing about this is that you <strong>do not even need to use polyfills</strong> for browsers that do not support it: all you
have to do is to use the <span data-rehype-pretty-code-figure=""><code data-language="html" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">picture</span><span style="color:#F8F8F2">&gt;</span></span></code></span> element along with <span data-rehype-pretty-code-figure=""><code data-language="html" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">source</span><span style="color:#F8F8F2">&gt;</span></span></code></span> elements to specify fallbacks.</p><figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="html" data-theme="dracula"><code data-language="html" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">picture</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#6272A4">    &lt;!-- If WebP is supported, use it --&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">source</span><span style="color:#50FA7B;font-style:italic"> type</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">image/webp</span><span style="color:#E9F284">&quot;</span></span>
<span data-line=""><span style="color:#50FA7B;font-style:italic">            srcset</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">picture-480.webp 480w, picture-800.webp 800w</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2"> /&gt;</span></span>
<span data-line=""><span style="color:#6272A4">    &lt;!-- Otherwise, use JPEG --&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">source</span><span style="color:#50FA7B;font-style:italic"> type</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">image/jpeg</span><span style="color:#E9F284">&quot;</span></span>
<span data-line=""><span style="color:#50FA7B;font-style:italic">            srcset</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">picture-480.jpg 480w, picture-800.jpg 800w</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2"> /&gt;</span></span>
<span data-line=""><span style="color:#6272A4">    &lt;!-- Finally, if the browser does not support picture, fallback to img --&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">img</span></span>
<span data-line=""><span style="color:#50FA7B;font-style:italic">        src</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">picture-default.jpg</span><span style="color:#E9F284">&quot;</span></span>
<span data-line=""><span style="color:#50FA7B;font-style:italic">        alt</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">A responsive image using WebP when supported and falling back to JPEG when not</span><span style="color:#E9F284">&quot;</span></span>
<span data-line=""><span style="color:#F8F8F2">    /&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">picture</span><span style="color:#F8F8F2">&gt;</span></span></code></pre></figure><section role="note" aria-label="Note" class="Blocks_info__wkiHx Blocks_post-it__gf2kM Blocks_common__p7gh9"><p>If you ever need to know in Javascript <strong>what picture is currently displayed</strong> in an <span data-rehype-pretty-code-figure=""><code data-language="html" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">img</span><span style="color:#F8F8F2">&gt;</span></span></code></span> (whether
it’s within a <span data-rehype-pretty-code-figure=""><code data-language="html" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">picture</span><span style="color:#F8F8F2">&gt;</span></span></code></span> or it has a <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">srcset</span></span></code></span> attribute), it is stored in the <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">currentSrc</span></span></code></span> attribute!
<small>(<a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/currentSrc">MDN</a>)</small></p></section><p>Unfortunately there is no such fallback mechanism for background images: you will have to <strong>use a feature detection
library</strong> to know whether it is supported or not and adapt your background image accordingly.
I suggest you read <a href="https://css-tricks.com/using-webp-images/#article-header-id-4">this CSS-Tricks article</a> that covers
the subject in great detail.</p></section><section><h4 id="lazily-load-pictures"><a aria-hidden="true" tabindex="-1" href="#lazily-load-pictures"><span>###</span></a>Lazily load pictures</h4><blockquote><p>Wait, there is a way to further reduce picture size other than resizing and more aggressive compression?</p></blockquote><p>Well, not exactly: traditionally, web browsers would load every pictures contained in a page once it has parsed its content.
In order to reduce the bandwidth when the user first visits a page, you can alter the browser’s behavior in order to make
it load pictures <em>only when the user is about to see them</em>: that’s called <strong>lazy-loading</strong>.</p><p>There are multiple ways to achieve lazy-loading:</p><ul>
<li>
<p>First, there is the <strong>native solution</strong>: <a href="https://caniuse.com/#feat=loading-lazy-attr">recent versions of Firefox and Chromium-based browsers</a>
support the <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">loading=&quot;lazy&quot;</span></span></code></span> attribute. It’s perfect: <em>no JS required</em>!</p>
</li>
<li>
<p>Then there are <strong>Javascript libraries</strong>: either <a href="https://github.com/mfranzke/loading-attribute-polyfill">polyfills</a> in order
to support older browsers and Safari, or libraries for your favorite front-end framework such as
<a href="https://github.com/tjoskar/ng-lazyload-image">ng-lazyload-image</a> for Angular.</p>
</li>
</ul><hr/></section></section><section><h3 id="network-and-cache"><a aria-hidden="true" tabindex="-1" href="#network-and-cache"><span>##</span></a>Network and cache</h3><section><h4 id="enable-http-compression"><a aria-hidden="true" tabindex="-1" href="#enable-http-compression"><span>###</span></a>Enable HTTP compression</h4><p>Now that we have reduced our asset’s size, the only optimization left is <a href="https://en.wikipedia.org/wiki/HTTP_compression">HTTP compression</a>:
if both the browser and server/CDN support it, the latter will <strong>compress the data before sending it to the browser</strong>,
resulting in <em>reduced bandwidth</em> and <em>faster downloads</em>.</p><p>You can enable it either on your server (if you have one) or on your CDN. For example, this is just
<a href="https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/ServingCompressedFiles.html">an option away in AWS CloudFront</a>,
and <a href="https://httpd.apache.org/docs/current/mod/mod_deflate.html">Apache</a> and <a href="https://nginx.org/en/docs/http/ngx_http_gzip_module.html">nginx</a>
have modules that enable HTTP compression.</p></section><section><h4 id="tell-the-browser-to-keep-your-assets-in-cache"><a aria-hidden="true" tabindex="-1" href="#tell-the-browser-to-keep-your-assets-in-cache"><span>###</span></a>Tell the browser to keep your assets in cache</h4><p>My final recommandation will be to <strong>rely as much as possible on the browser’s cache</strong>: this will make subsequent visits
on your website even faster as users won’t have to download your assets once again.</p><p>This is fairly simple to implement: all you have to do is set the <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">Cache-Control</span></span></code></span> header in your server’s or CDN’s response
for static assets.</p><p>You can read <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control">this MDN article</a> to find what
value works best for you. If you use AWS CloudFront, you’ll only need to <a href="https://geeks.uniplaces.com/cache-control-with-lambda-edge-95645b3aa4f0">add a Lambda@Edge function</a>
on the folder(s) that contain your assets.</p><hr/></section></section></section>
<section><h2 id="going-further"><a aria-hidden="true" tabindex="-1" href="#going-further"><span>#</span></a>Going further</h2><p>I hope those tips will help you make your website faster than ever!</p><p>If you want to find other areas for improvement,
I recommend you use Google’s <a href="https://developers.google.com/speed/pagespeed/insights/">PageSpeed Insights</a> tool: it will
help you mesure your improvements and give you tips to make your website even faster.</p></section>]]></content:encoded></item><item><title><![CDATA[How to create a WXR/XML import file: migrating from a static site generator to Wordpress]]></title><description><![CDATA[Many people on the Internet will instruct you how to migrate your website from Wordpress to a static website generator, but what happens if you have to go the other way around? Well, that’s what I had to do last year at Wedoogift, and I have compiled a few tips to help you out.
]]></description><link>https://axel.leroy.sh/blog/creating-wordpress-wxr-xml-import-file?utm_source=rss</link><guid isPermaLink="false">https://axel.leroy.sh/blog/creating-wordpress-wxr-xml-import-file</guid><category><![CDATA[Tips and tricks]]></category><category><![CDATA[Web development]]></category><dc:creator><![CDATA[Axel Leroy]]></dc:creator><pubDate>Sun, 19 Apr 2020 19:05:00 GMT</pubDate><enclosure url="https://axel.leroy.sh/blog/creating-wordpress-wxr-xml-import-file/og.jpg" length="0" type="image/jpeg"/><content:encoded><![CDATA[<link rel="preload" as="image" href="https://axel.leroy.sh/blog/creating-wordpress-wxr-xml-import-file/og.jpg"/><p><img src="https://axel.leroy.sh/blog/creating-wordpress-wxr-xml-import-file/og.jpg" alt=""/></p>
<p>Many people on the Internet will instruct you how to migrate your website from Wordpress to a static website generator,
but <strong>what happens if you have to go the other way around</strong>? Well, that’s what I had to do last year at Wedoogift, and I
have compiled a few tips to help you out.</p>
<section><h2 id="the-context"><a aria-hidden="true" tabindex="-1" href="#the-context"><span>#</span></a>The context</h2><p>Up until last year, Wedoogift’s homepage was a static website built with <em>Middleman</em>. It was super fast to load
(obviously, since it was static and served through AWS S3 and CloudFront) but it was a pain to update: <em>only a developer
could edit and deploy its content</em>. And <em>even worse</em>: nobody in my team knew exactly how it worked as the developper who
created the website left the company long before I joined.</p><p>Up until 2019, it wasn’t much of an issue: the website’s content had to be updated less than once a month. But the
company had been growing and set up a Marketing team which had as its first mission to entirely revitalize the website.
That meant <em>giving the Marketing department more autonomy and control over the homepage</em>, and obviously static website
generators were <strong>not going to cut it</strong>. Multiple solutions were studied but ultimately <strong>the company settled on using
Wordpress</strong>.</p><p>I’ll spare you the details, but a contractor put together a Wordpress site with some plugins and a custom theme, and
helped the Marketing department create brand-new pages.
Two things were then left to be migrated over to the new homepage: the blog’s articles and the list of shops where you can
use our vouchers.</p><p>Migrating the articles was fairly straightforward as the blog was already powered by Wordpress: create an XML export
containing the articles, import it in the new Wordpress instance, the latter automatically downloads the attached
pictures, eventually fix a few things using SQL queries, and you’re done.</p><p>Migrating the shops, in the other hand… <strong>was not that straightforward</strong>. Let me explain why:</p></section>
<section><h2 id="the-problem"><a aria-hidden="true" tabindex="-1" href="#the-problem"><span>#</span></a>The problem</h2><p>For starters, the shops were stored in a single JSON file and I had to create a new page in Wordpress for each of them.
To add complexity, the pages <strong>were using custom post types</strong> and had additional data to be filed in like the shop
category or a link to a help page.</p><p>Instinctively, I thought that I would just have to create an XML import file from JSON and my job would be done… but in
retrospect <em>I got a bit ahead of myself</em>.</p><p><em>Why</em>, would you ask? Well, one would think that <em>WXR</em> (<em>Wordpress eXtended RSS</em>), the format of the XML import file,
would be widely documented, <em>right</em>?</p><p>I could not have been more wrong: after hours of research, I have <strong>only found a single page</strong> documenting it, and it was
not very useful nor complete.
Other pages I found just straight-up suggested to <em>reverse-engineer</em> the parsing from the source code.</p><p>Well, I was certainly not willing to read hundreds of lines of PHP and it would certainly have not handled the
additional data I needed to add.</p><p>Instead of reading the source code, I set out to understand the structure from an export file generated from pages on
the target Wordpress install.</p><hr/></section>
<section><h2 id="the-findings"><a aria-hidden="true" tabindex="-1" href="#the-findings"><span>#</span></a>The findings</h2><section role="note" aria-label="Warning" class="Blocks_warning__PLH_J Blocks_post-it__gf2kM Blocks_common__p7gh9"><p>Do not consider the following as exactly true. These are my observations, which may be wrong: some attributes may be
ignored by the importer, or I may have made a wrong guess on the meaning of other attributes. <strong>Always</strong> do a backup
before importing and if you can, try first on a test environment.</p></section><p>From there, I found some interesting bits: the first being that Wordpress import files are actually
<a href="https://validator.w3.org/feed/docs/rss2.html">RSS 2.0</a> <strong>with Wordpress-specific namespaces</strong>!</p><p>The second being that <strong>every media</strong> (pictures, videos, etc.) <strong>are Wordpress posts with types and metadata</strong> specific to media
files. And since they have IDs, you can then reference them in posts or pages for stuff like thumbnails.</p><p>Without further ado, let me break down how Wordpress import files are built:</p><section><h3 id="namespaces-and-website-description"><a aria-hidden="true" tabindex="-1" href="#namespaces-and-website-description"><span>##</span></a>Namespaces and website description</h3><p>First, the WXR is initialized with the RSS, Dublin Core and Wordpress namespaces:</p><figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="xml" data-theme="dracula"><code data-language="xml" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#F8F8F2">&lt;?</span><span style="color:#FF79C6">xml</span><span style="color:#50FA7B;font-style:italic"> version</span><span style="color:#F8F8F2">=</span><span style="color:#E9F284">&#x27;</span><span style="color:#F1FA8C">1.0</span><span style="color:#E9F284">&#x27;</span><span style="color:#50FA7B;font-style:italic"> encoding</span><span style="color:#F8F8F2">=</span><span style="color:#E9F284">&#x27;</span><span style="color:#F1FA8C">UTF-8</span><span style="color:#E9F284">&#x27;</span><span style="color:#F8F8F2">?&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">rss</span><span style="color:#50FA7B;font-style:italic"> xmlns</span><span style="color:#FF79C6;font-style:italic">:</span><span style="color:#50FA7B;font-style:italic">content</span><span style="color:#F8F8F2">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">http://purl.org/rss/1.0/modules/content/</span><span style="color:#E9F284">&quot;</span></span>
<span data-line=""><span style="color:#50FA7B;font-style:italic">     xmlns</span><span style="color:#FF79C6;font-style:italic">:</span><span style="color:#50FA7B;font-style:italic">dc</span><span style="color:#F8F8F2">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">http://purl.org/dc/elements/1.1/</span><span style="color:#E9F284">&quot;</span></span>
<span data-line=""><span style="color:#50FA7B;font-style:italic">     xmlns</span><span style="color:#FF79C6;font-style:italic">:</span><span style="color:#50FA7B;font-style:italic">excerpt</span><span style="color:#F8F8F2">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">http://wordpress.org/export/1.2/excerpt/</span><span style="color:#E9F284">&quot;</span></span>
<span data-line=""><span style="color:#50FA7B;font-style:italic">     xmlns</span><span style="color:#FF79C6;font-style:italic">:</span><span style="color:#50FA7B;font-style:italic">wp</span><span style="color:#F8F8F2">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">http://wordpress.org/export/1.2/</span><span style="color:#E9F284">&quot;</span></span>
<span data-line=""><span style="color:#50FA7B;font-style:italic">     version</span><span style="color:#F8F8F2">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">2.0</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">&gt;</span></span></code></pre></figure><p>Then, a <span data-rehype-pretty-code-figure=""><code data-language="xml" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">channel</span><span style="color:#F8F8F2">&gt;</span></span></code></span> is created containing information on the website:</p><figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="xml" data-theme="dracula"><code data-language="xml" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">channel</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">title</span><span style="color:#F8F8F2">&gt;My website title&lt;/</span><span style="color:#FF79C6">title</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">link</span><span style="color:#F8F8F2">&gt;https://domain.tld&lt;/</span><span style="color:#FF79C6">link</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">language</span><span style="color:#F8F8F2">&gt;fr_FR&lt;/</span><span style="color:#FF79C6">language</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">wp:wxr_version</span><span style="color:#F8F8F2">&gt;1.2&lt;/</span><span style="color:#FF79C6">wp:wxr_version</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">wp:base_site_url</span><span style="color:#F8F8F2">&gt;https://domain.tld&lt;/</span><span style="color:#FF79C6">wp:base_site_url</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">wp:base_blog_url</span><span style="color:#F8F8F2">&gt;https://domain.tld&lt;/</span><span style="color:#FF79C6">wp:base_blog_url</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">wp:author</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">      &lt;</span><span style="color:#FF79C6">wp:author_id</span><span style="color:#F8F8F2">&gt;1&lt;/</span><span style="color:#FF79C6">wp:author_id</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">      &lt;</span><span style="color:#FF79C6">wp:author_login</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">username</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:author_login</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">      &lt;</span><span style="color:#FF79C6">wp:author_email</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">user@domain.tld</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:author_email</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">      &lt;</span><span style="color:#FF79C6">wp:author_display_name</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">User Name</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:author_display_name</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">      &lt;</span><span style="color:#FF79C6">wp:author_first_name</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">User</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:author_first_name</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">      &lt;</span><span style="color:#FF79C6">wp:author_last_name</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">Name</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:author_last_name</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;/</span><span style="color:#FF79C6">wp:author</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">generator</span><span style="color:#F8F8F2">&gt;https://wordpress.org/?v=5.2&lt;/</span><span style="color:#FF79C6">generator</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    ...</span></span>
<span data-line=""><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">channel</span><span style="color:#F8F8F2">&gt;</span></span></code></pre></figure><p>A few things to note here:</p><ul>
<li>
<p>Use <span data-rehype-pretty-code-figure=""><code data-language="xml" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">wp:author</span><span style="color:#F8F8F2">&gt;</span></span></code></span> <strong>to list the author(s)</strong> of your posts. If one of the authors do not exist on the destination Wordpress,
the importer will give you the choice between assigning the posts to an existing user and creating a new author.</p>
<p>To assign an author to a post add the <span data-rehype-pretty-code-figure=""><code data-language="xml" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">dc:creator</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">username</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">dc:creator</span><span style="color:#F8F8F2">&gt;</span></span></code></span> node.</p>
</li>
<li>
<p>The importer does not really care about the URLs in <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">link</span></span></code></span>, <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">wp:base_site_url</span></span></code></span> and <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">wp:base_blog_url</span></span></code></span>, nor about the
values in <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">language</span></span></code></span> or <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">title</span></span></code></span>.</p>
</li>
</ul></section><section><h3 id="post-content"><a aria-hidden="true" tabindex="-1" href="#post-content"><span>##</span></a>Post content</h3><p>Lets now dissect a post and its thumbnail.</p><figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="xml" data-theme="dracula"><code data-language="xml" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">item</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">title</span><span style="color:#F8F8F2">&gt;thumbnail&lt;/</span><span style="color:#FF79C6">title</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">link</span><span style="color:#F8F8F2">&gt;https://domain.tld/assets/thumbnail.png&lt;/</span><span style="color:#FF79C6">link</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">dc:creator</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">username</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">dc:creator</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">description</span><span style="color:#F8F8F2">&gt;&lt;/</span><span style="color:#FF79C6">description</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:post_id</span><span style="color:#F8F8F2">&gt;1&lt;/</span><span style="color:#FF79C6">wp:post_id</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:post_date</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">2019-05-27 10:08:23</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:post_date</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:post_date_gmt</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">2019-05-27 08:08:23</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:post_date_gmt</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:comment_status</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">closed</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:comment_status</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:ping_status</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">closed</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:ping_status</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:post_name</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">thumbnail</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:post_name</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:status</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">publish</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:status</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:post_parent</span><span style="color:#F8F8F2">&gt;0&lt;/</span><span style="color:#FF79C6">wp:post_parent</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:menu_order</span><span style="color:#F8F8F2">&gt;0&lt;/</span><span style="color:#FF79C6">wp:menu_order</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:post_type</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">attachment</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:post_type</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:post_password</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:post_password</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:is_sticky</span><span style="color:#F8F8F2">&gt;0&lt;/</span><span style="color:#FF79C6">wp:is_sticky</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:attachment_url</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">https://domain.tld/assets/thumbnail.png</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:attachment_url</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:postmeta</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">wp:meta_key</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">_wp_attached_file</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:meta_key</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">wp:meta_value</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">2019/05/thumbnail</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:meta_value</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;/</span><span style="color:#FF79C6">wp:postmeta</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">guid</span><span style="color:#50FA7B;font-style:italic"> isPermalink</span><span style="color:#F8F8F2">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">false</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">&gt;https://domain.tld/assets/thumbnail.png&lt;/</span><span style="color:#FF79C6">guid</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">item</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">item</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">title</span><span style="color:#F8F8F2">&gt;My Page&lt;/</span><span style="color:#FF79C6">title</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">link</span><span style="color:#F8F8F2">&gt;https://domain.tld/my-page&lt;/</span><span style="color:#FF79C6">link</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">dc:creator</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">username</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">dc:creator</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">description</span><span style="color:#F8F8F2">&gt;&lt;/</span><span style="color:#FF79C6">description</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:post_id</span><span style="color:#F8F8F2">&gt;1242&lt;/</span><span style="color:#FF79C6">wp:post_id</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:post_date</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">2019-05-27 10:08:23</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:post_date</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:post_date_gmt</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">2019-05-27 08:08:23</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:post_date_gmt</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:comment_status</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">closed</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:comment_status</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:ping_status</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">closed</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:ping_status</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:post_name</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">my-page</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:post_name</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:status</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">publish</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:status</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:post_parent</span><span style="color:#F8F8F2">&gt;0&lt;/</span><span style="color:#FF79C6">wp:post_parent</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:menu_order</span><span style="color:#F8F8F2">&gt;0&lt;/</span><span style="color:#FF79C6">wp:menu_order</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:post_type</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">page</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:post_type</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:post_password</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:post_password</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:is_sticky</span><span style="color:#F8F8F2">&gt;0&lt;/</span><span style="color:#FF79C6">wp:is_sticky</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">content:encoded</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span></span>
<span data-line=""><span style="color:#F1FA8C">&lt;h1&gt;Some title&lt;/h1&gt;</span></span>
<span data-line=""><span style="color:#F1FA8C">&lt;p&gt;Lorem Ipsum&lt;/p&gt;</span></span>
<span data-line=""><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">content:encoded</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">excerpt:encoded</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">&lt;p&gt;Lorem Ipsum&lt;/p&gt;&lt;p&gt;Sin dolor amet&lt;/p&gt;</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">excerpt:encoded</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">category</span><span style="color:#50FA7B;font-style:italic"> domain</span><span style="color:#F8F8F2">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">univers</span><span style="color:#E9F284">&quot;</span><span style="color:#50FA7B;font-style:italic"> nicename</span><span style="color:#F8F8F2">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">mode-beaute</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">Mode &amp; beauté</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">category</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:postmeta</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">wp:meta_key</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">_thumbnail_id</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:meta_key</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">wp:meta_value</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">1241</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:meta_value</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;/</span><span style="color:#FF79C6">wp:postmeta</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">item</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">item</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">title</span><span style="color:#F8F8F2">&gt;My Article&lt;/</span><span style="color:#FF79C6">title</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">link</span><span style="color:#F8F8F2">&gt;https://domain.tld/my-article&lt;/</span><span style="color:#FF79C6">link</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">dc:creator</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">username</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">dc:creator</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">description</span><span style="color:#F8F8F2">&gt;&lt;/</span><span style="color:#FF79C6">description</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:post_id</span><span style="color:#F8F8F2">&gt;1243&lt;/</span><span style="color:#FF79C6">wp:post_id</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:post_date</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">2019-05-27 10:08:23</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:post_date</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:post_date_gmt</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">2019-05-27 08:08:23</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:post_date_gmt</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:comment_status</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">closed</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:comment_status</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:ping_status</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">closed</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:ping_status</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:post_name</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">my-page</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:post_name</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:status</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">publish</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:status</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:post_parent</span><span style="color:#F8F8F2">&gt;0&lt;/</span><span style="color:#FF79C6">wp:post_parent</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:menu_order</span><span style="color:#F8F8F2">&gt;0&lt;/</span><span style="color:#FF79C6">wp:menu_order</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:post_type</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">post</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:post_type</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:post_password</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:post_password</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:is_sticky</span><span style="color:#F8F8F2">&gt;0&lt;/</span><span style="color:#FF79C6">wp:is_sticky</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">content:encoded</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span></span>
<span data-line=""><span style="color:#F1FA8C">&lt;h1&gt;Some title&lt;/h1&gt;</span></span>
<span data-line=""><span style="color:#F1FA8C">&lt;p&gt;Lorem Ipsum&lt;/p&gt;</span></span>
<span data-line=""><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">content:encoded</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">excerpt:encoded</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">&lt;p&gt;Lorem Ipsum&lt;/p&gt;&lt;p&gt;Sin dolor amet&lt;/p&gt;</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">excerpt:encoded</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">category</span><span style="color:#50FA7B;font-style:italic"> domain</span><span style="color:#F8F8F2">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">category</span><span style="color:#E9F284">&quot;</span><span style="color:#50FA7B;font-style:italic"> nicename</span><span style="color:#F8F8F2">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">blog-posts</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">Blog posts</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">category</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">category</span><span style="color:#50FA7B;font-style:italic"> domain</span><span style="color:#F8F8F2">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">post_tag</span><span style="color:#E9F284">&quot;</span><span style="color:#50FA7B;font-style:italic"> nicename</span><span style="color:#F8F8F2">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">articles</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">articles</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">category</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">category</span><span style="color:#50FA7B;font-style:italic"> domain</span><span style="color:#F8F8F2">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">post_tag</span><span style="color:#E9F284">&quot;</span><span style="color:#50FA7B;font-style:italic"> nicename</span><span style="color:#F8F8F2">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">hello-world</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">hello world</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">category</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:comment</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">wp:comment_id</span><span style="color:#F8F8F2">&gt;1&lt;/</span><span style="color:#FF79C6">wp:comment_id</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">wp:comment_author</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">Some Visitor</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:comment_author</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">wp:comment_author_email</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">visitor@wordpress.example</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:comment_author_email</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">wp:comment_author_url</span><span style="color:#F8F8F2">&gt;https://wordpress.org/&lt;/</span><span style="color:#FF79C6">wp:comment_author_url</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">wp:comment_author_IP</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">127.0.0.1</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:comment_author_IP</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">wp:comment_date</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">2020-04-19 17:57:25</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:comment_date</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">wp:comment_date_gmt</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">2020-04-19 15:57:25</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:comment_date_gmt</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">wp:comment_content</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">&lt;p&gt;Comment HTML&lt;/p&gt;</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:comment_content</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">wp:comment_approved</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">1</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:comment_approved</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">wp:comment_type</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:comment_type</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">wp:comment_parent</span><span style="color:#F8F8F2">&gt;0&lt;/</span><span style="color:#FF79C6">wp:comment_parent</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">wp:comment_user_id</span><span style="color:#F8F8F2">&gt;0&lt;/</span><span style="color:#FF79C6">wp:comment_user_id</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;/</span><span style="color:#FF79C6">wp:comment</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;</span><span style="color:#FF79C6">wp:postmeta</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">wp:meta_key</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">_thumbnail_id</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:meta_key</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">wp:meta_value</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">1241</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:meta_value</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">  &lt;/</span><span style="color:#FF79C6">wp:postmeta</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">item</span><span style="color:#F8F8F2">&gt;</span></span></code></pre></figure><ul>
<li>
<p>Articles, pages and media <strong>are all posts</strong> following more or less the same structure and they are differentiated by the
value of the <span data-rehype-pretty-code-figure=""><code data-language="xml" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">wp:post_type</span><span style="color:#F8F8F2">&gt;</span></span></code></span> node. The value can be <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">post</span></span></code></span>, <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">page</span></span></code></span>, <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">attachment</span></span></code></span> or any custom post type you have
defined in your Wordpress install.</p>
</li>
<li>
<p>Use <span data-rehype-pretty-code-figure=""><code data-language="xml" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">title</span><span style="color:#F8F8F2">&gt;</span></span></code></span> to set the <strong>post’s title</strong>, while <span data-rehype-pretty-code-figure=""><code data-language="xml" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">wp:post_name</span><span style="color:#F8F8F2">&gt;</span></span></code></span> will set the <strong>post’s slug</strong>.</p>
</li>
<li>
<p>The <span data-rehype-pretty-code-figure=""><code data-language="xml" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">content:encoded</span><span style="color:#F8F8F2">&gt;</span></span></code></span> and <span data-rehype-pretty-code-figure=""><code data-language="xml" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">excerpt:encoded</span><span style="color:#F8F8F2">&gt;</span></span></code></span> <strong>contain the HTML of your post</strong>’s content and excerpt.</p>
</li>
<li>
<p>You can set any <span data-rehype-pretty-code-figure=""><code data-language="xml" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">wp:post_id</span><span style="color:#F8F8F2">&gt;</span></span></code></span> you want, but <strong>make sure it does not overlap</strong> with an existing post.</p>
</li>
<li>
<p>If you want <strong>to make a post a child of another</strong>, set <span data-rehype-pretty-code-figure=""><code data-language="xml" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">wp:post_parent</span><span style="color:#F8F8F2">&gt;</span></span></code></span> to the id of the parent post.</p>
</li>
<li>
<p>Use the <span data-rehype-pretty-code-figure=""><code data-language="xml" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">wp:comment_status</span><span style="color:#F8F8F2">&gt;</span></span></code></span> and <span data-rehype-pretty-code-figure=""><code data-language="xml" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">wp:ping_status</span><span style="color:#F8F8F2">&gt;</span></span></code></span> to enable or disable comments and pings. Allowed values are <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">open</span></span></code></span>
and <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">closed</span></span></code></span>. And <strong>you can add comments to a post</strong> using the <span data-rehype-pretty-code-figure=""><code data-language="xml" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">wp:comment</span><span style="color:#F8F8F2">&gt;</span></span></code></span> node.</p>
</li>
<li>
<p>Use <span data-rehype-pretty-code-figure=""><code data-language="xml" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">wp:status</span><span style="color:#F8F8F2">&gt;</span></span></code></span> <strong>to set the status</strong> to published (<span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">publish</span></span></code></span>), draft (<span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">draft</span></span></code></span>) or in the trash (<span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">trash</span></span></code></span>).</p>
</li>
<li>
<p>Posts can be protected by a password set using <span data-rehype-pretty-code-figure=""><code data-language="xml" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">wp:post_password</span><span style="color:#F8F8F2">&gt;</span></span></code></span>.</p>
</li>
<li>
<p>Set an article <strong>to be shown above others</strong> by setting <span data-rehype-pretty-code-figure=""><code data-language="xml" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">wp:is_sticky</span><span style="color:#F8F8F2">&gt;</span></span></code></span> to <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">1</span></span></code></span>.
Note that <a href="https://core.trac.wordpress.org/ticket/12702">it only works with articles</a>.</p>
</li>
<li>
<p>The <span data-rehype-pretty-code-figure=""><code data-language="xml" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">link</span><span style="color:#F8F8F2">&gt;</span></span></code></span> attribute does not seem to be used by the parser, probably a prerequisite of the RSS spec.</p>
</li>
<li>
<p>The <span data-rehype-pretty-code-figure=""><code data-language="xml" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">category</span><span style="color:#F8F8F2">&gt;</span></span></code></span> node is used for <strong>assigning tags and categories to posts and custom post types</strong>:</p>
<ul>
<li>For <strong>tags</strong>, use <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">domain=&quot;post_tag&quot;</span></span></code></span> and set <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">nicename</span></span></code></span> to your tag’s slug.</li>
<li>For <strong>categories</strong>, use <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">domain=&quot;category&quot;</span></span></code></span> and set <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">nicename</span></span></code></span> to your category’s slug.</li>
<li>For <strong>custom post types categories</strong>, set <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">domain</span></span></code></span> to your custom post type and <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">nicename</span></span></code></span> to your category’s slug.</li>
</ul>
</li>
</ul></section><section><h3 id="attachments"><a aria-hidden="true" tabindex="-1" href="#attachments"><span>##</span></a>Attachments</h3><p>For attachments, you can ask Wordpress to download them when importing by checking “<em>Download and import file
attachments</em>”. Do not forget to set <span data-rehype-pretty-code-figure=""><code data-language="xml" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">wp:attachment_url</span><span style="color:#F8F8F2">&gt;</span></span></code></span>!</p><p>You can also set where it will be downloaded by setting the following <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">post_meta</span></span></code></span>:</p><figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="xml" data-theme="dracula"><code data-language="xml" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">wp:postmeta</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">wp:meta_key</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">_wp_attached_file</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:meta_key</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">wp:meta_value</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><mark data-highlighted-chars=""><span style="color:#F1FA8C">2019/05/thumbnail</span></mark><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:meta_value</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:postmeta</span><span style="color:#F8F8F2">&gt;</span></span></code></pre></figure><p>Finally, you can use the attachment as a post or page thumbnail by setting the <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">thumbnail_id</span></span></code></span> meta with the
attachment’s ID.</p></section><section><h3 id="custom-fields"><a aria-hidden="true" tabindex="-1" href="#custom-fields"><span>##</span></a>Custom fields</h3><p>If the destination Worpress install uses <a href="https://www.advancedcustomfields.com/">Advanced Custom Fields</a> (ACF), you can fill
Custom Fields, but <em>this is a bit trickier</em>.</p><p>Basicaly, you would fill it by adding the following postmeta where <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">my-custom-field</span></span></code></span> is your field’s name
(not to be confused with the field’s title):</p><figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="xml" data-theme="dracula"><code data-language="xml" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">wp:postmeta</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">wp:meta_key</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">my-custom-field</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:meta_key</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">wp:meta_value</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><mark data-highlighted-chars=""><span style="color:#F1FA8C">Custom field data</span></mark><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:meta_value</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:postmeta</span><span style="color:#F8F8F2">&gt;</span></span></code></pre></figure><p>But in order for it to work, <strong>you have to link this field to ACF’s field</strong> by adding another postmeta
with you custom field’s name prefixed by an underscore as the key:</p><figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="xml" data-theme="dracula"><code data-language="xml" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">wp:postmeta</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">wp:meta_key</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><span style="color:#F1FA8C">_my-custom-field</span><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:meta_key</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    &lt;</span><span style="color:#FF79C6">wp:meta_value</span><span style="color:#F8F8F2">&gt;</span><span style="color:#E9F284">&lt;![CDATA[</span><mark data-highlighted-chars=""><span style="color:#F1FA8C">field_xxxxxxxx</span></mark><span style="color:#E9F284">]]&gt;</span><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:meta_value</span><span style="color:#F8F8F2">&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">&lt;/</span><span style="color:#FF79C6">wp:postmeta</span><span style="color:#F8F8F2">&gt;</span></span></code></pre></figure><p>You will notice that I filled <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">field_xxxxxxxx</span></span></code></span> as the meta’s value. That’s because we will <strong>need to find the ID under
which ACF saved the field</strong> in database. Luckily, ACF’s custom fields are plain posts with <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">acf-field</span></span></code></span> as their type.</p><p>The following SQL request will give use every custom fields saved in Wordpress: you just have to pick the <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">post_name</span></span></code></span>
that matches with your field!</p><figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="sql" data-theme="dracula"><code data-language="sql" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#FF79C6">select</span><span style="color:#F8F8F2"> post_title, post_excerpt, post_name</span></span>
<span data-line=""><span style="color:#FF79C6">from</span><span style="color:#F8F8F2"> wp_posts</span></span>
<span data-line=""><span style="color:#FF79C6">where</span><span style="color:#F8F8F2"> post_type </span><span style="color:#FF79C6">=</span><span style="color:#E9F284"> &#x27;</span><span style="color:#F1FA8C">acf-field</span><span style="color:#E9F284">&#x27;</span><span style="color:#F8F8F2">;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">+</span><span style="color:#6272A4">-----------------+-----------------+---------------------+</span></span>
<span data-line=""><span style="color:#F8F8F2">| post_title      | post_excerpt    | post_name           |</span></span>
<span data-line=""><span style="color:#FF79C6">+</span><span style="color:#6272A4">-----------------+-----------------+---------------------+</span></span>
<span data-line=""><span style="color:#F8F8F2">| My Custom Field | my_custom_field | field_5e9d99af9f6b7 |</span></span>
<span data-line=""><span style="color:#FF79C6">+</span><span style="color:#6272A4">-----------------+-----------------+---------------------+</span></span></code></pre></figure><hr/></section></section>
<section><h2 id="a-python-library-for-automating-the-file-generation"><a aria-hidden="true" tabindex="-1" href="#a-python-library-for-automating-the-file-generation"><span>#</span></a>A Python library for automating the file generation</h2><p>To make my life easier, I developed the following Python library:</p><figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="python" data-theme="dracula"><code data-language="python" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#6272A4">&quot;&quot;&quot;Utility functions to create a WXR file for Wordpress.</span></span>
<span data-line=""><span style="color:#6272A4">&quot;&quot;&quot;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">import</span><span style="color:#F8F8F2"> datetime</span></span>
<span data-line=""><span style="color:#FF79C6">import</span><span style="color:#F8F8F2"> os</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">from</span><span style="color:#F8F8F2"> lxml </span><span style="color:#FF79C6">import</span><span style="color:#F8F8F2"> etree </span><span style="color:#FF79C6">as</span><span style="color:#BD93F9"> ET</span></span>
<span data-line=""><span style="color:#FF79C6">from</span><span style="color:#F8F8F2"> lxml.etree </span><span style="color:#FF79C6">import</span><span style="color:#BD93F9"> CDATA</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6272A4"># XML namespaces declarations</span></span>
<span data-line=""><span style="color:#BD93F9">DC_NS</span><span style="color:#FF79C6"> =</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">http://purl.org/dc/elements/1.1/</span><span style="color:#E9F284">&quot;</span></span>
<span data-line=""><span style="color:#BD93F9">WP_NS</span><span style="color:#FF79C6"> =</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">http://wordpress.org/export/1.2/</span><span style="color:#E9F284">&quot;</span></span>
<span data-line=""><span style="color:#BD93F9">CONTENT_NS</span><span style="color:#FF79C6"> =</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">http://purl.org/rss/1.0/modules/content/</span><span style="color:#E9F284">&quot;</span></span>
<span data-line=""><span style="color:#BD93F9">EXCERPT_NS</span><span style="color:#FF79C6"> =</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">http://wordpress.org/export/1.2/excerpt/</span><span style="color:#E9F284">&quot;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#BD93F9">NSMAP</span><span style="color:#FF79C6"> =</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#E9F284">    &quot;</span><span style="color:#F1FA8C">dc</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">: </span><span style="color:#BD93F9">DC_NS</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#E9F284">    &quot;</span><span style="color:#F1FA8C">wp</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">: </span><span style="color:#BD93F9">WP_NS</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#E9F284">    &quot;</span><span style="color:#F1FA8C">content</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">: </span><span style="color:#BD93F9">CONTENT_NS</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#E9F284">    &quot;</span><span style="color:#F1FA8C">excerpt</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">: </span><span style="color:#BD93F9">EXCERPT_NS</span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span>
<span data-line=""><span style="color:#6272A4"># To make use of namespaces easier</span></span>
<span data-line=""><span style="color:#BD93F9">DC</span><span style="color:#FF79C6"> =</span><span style="color:#E9F284"> &quot;</span><span style="color:#BD93F9">{{{0}}}</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">.format(</span><span style="color:#BD93F9">DC_NS</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""><span style="color:#BD93F9">WP</span><span style="color:#FF79C6"> =</span><span style="color:#E9F284"> &quot;</span><span style="color:#BD93F9">{{{0}}}</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">.format(</span><span style="color:#BD93F9">WP_NS</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""><span style="color:#BD93F9">CONTENT</span><span style="color:#FF79C6"> =</span><span style="color:#E9F284"> &quot;</span><span style="color:#BD93F9">{{{0}}}</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">.format(</span><span style="color:#BD93F9">CONTENT_NS</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""><span style="color:#BD93F9">EXCERPT</span><span style="color:#FF79C6"> =</span><span style="color:#E9F284"> &quot;</span><span style="color:#BD93F9">{{{0}}}</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">.format(</span><span style="color:#BD93F9">EXCERPT_NS</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""> </span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">def</span><span style="color:#50FA7B"> create_root_node</span><span style="color:#F8F8F2">():</span></span>
<span data-line=""><span style="color:#6272A4">    # Passing the namespaces map in order to use tags such as &lt;wp:author&gt;</span></span>
<span data-line=""><span style="color:#F8F8F2">    root </span><span style="color:#FF79C6">=</span><span style="color:#BD93F9"> ET</span><span style="color:#F8F8F2">.Element(</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">rss</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, </span><span style="color:#FFB86C;font-style:italic">version</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">2.0</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, </span><span style="color:#FFB86C;font-style:italic">nsmap</span><span style="color:#FF79C6">=</span><span style="color:#BD93F9">NSMAP</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""><span style="color:#FF79C6">    return</span><span style="color:#F8F8F2"> root</span></span>
<span data-line=""> </span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">def</span><span style="color:#50FA7B"> create_text_node</span><span style="color:#F8F8F2">(</span><span style="color:#FFB86C;font-style:italic">parent</span><span style="color:#F8F8F2">, </span><span style="color:#FFB86C;font-style:italic">name</span><span style="color:#F8F8F2">, </span><span style="color:#FFB86C;font-style:italic">content</span><span style="color:#F8F8F2">):</span></span>
<span data-line=""><span style="color:#F8F8F2">    node </span><span style="color:#FF79C6">=</span><span style="color:#BD93F9"> ET</span><span style="color:#F8F8F2">.SubElement(parent, name)</span></span>
<span data-line=""><span style="color:#F8F8F2">    node.text </span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2"> content</span></span>
<span data-line=""><span style="color:#FF79C6">    return</span><span style="color:#F8F8F2"> node</span></span>
<span data-line=""> </span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">def</span><span style="color:#50FA7B"> create_channel_node</span><span style="color:#F8F8F2">(</span><span style="color:#FFB86C;font-style:italic">root_node</span><span style="color:#F8F8F2">, </span><span style="color:#FFB86C;font-style:italic">website_title</span><span style="color:#F8F8F2">, </span><span style="color:#FFB86C;font-style:italic">website_root</span><span style="color:#F8F8F2">, </span><span style="color:#FFB86C;font-style:italic">language</span><span style="color:#F8F8F2">):</span></span>
<span data-line=""><span style="color:#F8F8F2">    channel_node </span><span style="color:#FF79C6">=</span><span style="color:#BD93F9"> ET</span><span style="color:#F8F8F2">.SubElement(root_node, </span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">channel</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""><span style="color:#F8F8F2">    create_text_node(channel_node, </span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">title</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, website_title)</span></span>
<span data-line=""><span style="color:#F8F8F2">    create_text_node(channel_node, </span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">link</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, website_root)</span></span>
<span data-line=""><span style="color:#F8F8F2">    create_text_node(channel_node, </span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">language</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, language)</span></span>
<span data-line=""><span style="color:#F8F8F2">    create_text_node(channel_node, </span><span style="color:#BD93F9">WP</span><span style="color:#FF79C6"> +</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">wxr_version</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, </span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">1.2</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""><span style="color:#F8F8F2">    create_text_node(channel_node, </span><span style="color:#BD93F9">WP</span><span style="color:#FF79C6"> +</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">base_site_url</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, website_root)</span></span>
<span data-line=""><span style="color:#F8F8F2">    create_text_node(channel_node, </span><span style="color:#BD93F9">WP</span><span style="color:#FF79C6"> +</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">base_blog_url</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, website_root)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F8F8F2">    wp_author </span><span style="color:#FF79C6">=</span><span style="color:#BD93F9"> ET</span><span style="color:#F8F8F2">.SubElement(channel_node, </span><span style="color:#BD93F9">WP</span><span style="color:#FF79C6"> +</span><span style="color:#E9F284"> &#x27;</span><span style="color:#F1FA8C">author</span><span style="color:#E9F284">&#x27;</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""><span style="color:#F8F8F2">    create_text_node(wp_author, </span><span style="color:#BD93F9">WP</span><span style="color:#FF79C6"> +</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">author_id</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, </span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">1</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""><span style="color:#F8F8F2">    create_text_node(wp_author, </span><span style="color:#BD93F9">WP</span><span style="color:#FF79C6"> +</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">author_login</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, CDATA(</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">author</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">))</span></span>
<span data-line=""><span style="color:#F8F8F2">    create_text_node(wp_author, </span><span style="color:#BD93F9">WP</span><span style="color:#FF79C6"> +</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">author_email</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, CDATA(</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">author@domain.tld</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">))</span></span>
<span data-line=""><span style="color:#F8F8F2">    create_text_node(wp_author, </span><span style="color:#BD93F9">WP</span><span style="color:#FF79C6"> +</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">author_display_name</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, CDATA(</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">author</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">))</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F8F8F2">    create_text_node(channel_node, </span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">generator</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, </span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">https://wordpress.org/?v=5.2</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""><span style="color:#FF79C6">    return</span><span style="color:#F8F8F2"> channel_node</span></span>
<span data-line=""> </span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">def</span><span style="color:#50FA7B"> create_item_node</span><span style="color:#F8F8F2">(</span><span style="color:#FF79C6">*</span><span style="color:#F8F8F2">, </span><span style="color:#FFB86C;font-style:italic">parent</span><span style="color:#F8F8F2">, </span><span style="color:#FFB86C;font-style:italic">post_id</span><span style="color:#F8F8F2">, </span><span style="color:#FFB86C;font-style:italic">title</span><span style="color:#F8F8F2">, </span><span style="color:#FFB86C;font-style:italic">link</span><span style="color:#F8F8F2">, </span><span style="color:#FFB86C;font-style:italic">post_name</span><span style="color:#F8F8F2">, </span><span style="color:#FFB86C;font-style:italic">status</span><span style="color:#F8F8F2">, </span><span style="color:#FFB86C;font-style:italic">post_type</span><span style="color:#F8F8F2">):</span></span>
<span data-line=""><span style="color:#F8F8F2">    item </span><span style="color:#FF79C6">=</span><span style="color:#BD93F9"> ET</span><span style="color:#F8F8F2">.SubElement(parent, </span><span style="color:#E9F284">&#x27;</span><span style="color:#F1FA8C">item</span><span style="color:#E9F284">&#x27;</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""><span style="color:#F8F8F2">    create_text_node(item, </span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">title</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, title)</span></span>
<span data-line=""><span style="color:#F8F8F2">    create_text_node(item, </span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">link</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, link)</span></span>
<span data-line=""><span style="color:#F8F8F2">    create_text_node(item, </span><span style="color:#BD93F9">DC</span><span style="color:#FF79C6"> +</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">creator</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, CDATA(</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">author</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">))</span></span>
<span data-line=""><span style="color:#F8F8F2">    create_text_node(item, </span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">description</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, </span><span style="color:#E9F284">&quot;&quot;</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""><span style="color:#F8F8F2">    create_text_node(item, </span><span style="color:#BD93F9">WP</span><span style="color:#FF79C6"> +</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">post_id</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, post_id)</span></span>
<span data-line=""><span style="color:#F8F8F2">    create_text_node(item, </span><span style="color:#BD93F9">WP</span><span style="color:#FF79C6"> +</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">post_date</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, CDATA(</span><span style="color:#E9F284">&#x27;</span><span style="color:#BD93F9">{0</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9">%Y-%m-%d %H:%M:%S}</span><span style="color:#E9F284">&#x27;</span><span style="color:#F8F8F2">.format(datetime.datetime.now())))</span></span>
<span data-line=""><span style="color:#F8F8F2">    create_text_node(item, </span><span style="color:#BD93F9">WP</span><span style="color:#FF79C6"> +</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">post_date_gmt</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, CDATA(</span><span style="color:#E9F284">&#x27;</span><span style="color:#BD93F9">{0</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9">%Y-%m-%d %H:%M:%S}</span><span style="color:#E9F284">&#x27;</span><span style="color:#F8F8F2">.format(datetime.datetime.utcnow())))</span></span>
<span data-line=""><span style="color:#F8F8F2">    create_text_node(item, </span><span style="color:#BD93F9">WP</span><span style="color:#FF79C6"> +</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">comment_status</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, CDATA(</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">closed</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">))</span></span>
<span data-line=""><span style="color:#F8F8F2">    create_text_node(item, </span><span style="color:#BD93F9">WP</span><span style="color:#FF79C6"> +</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">ping_status</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, CDATA(</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">closed</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">))</span></span>
<span data-line=""><span style="color:#F8F8F2">    create_text_node(item, </span><span style="color:#BD93F9">WP</span><span style="color:#FF79C6"> +</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">post_name</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, CDATA(post_name))</span></span>
<span data-line=""><span style="color:#F8F8F2">    create_text_node(item, </span><span style="color:#BD93F9">WP</span><span style="color:#FF79C6"> +</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">status</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, CDATA(status))</span></span>
<span data-line=""><span style="color:#F8F8F2">    create_text_node(item, </span><span style="color:#BD93F9">WP</span><span style="color:#FF79C6"> +</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">post_parent</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, </span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">0</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""><span style="color:#F8F8F2">    create_text_node(item, </span><span style="color:#BD93F9">WP</span><span style="color:#FF79C6"> +</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">menu_order</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, </span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">0</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""><span style="color:#F8F8F2">    create_text_node(item, </span><span style="color:#BD93F9">WP</span><span style="color:#FF79C6"> +</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">post_type</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, CDATA(post_type))</span></span>
<span data-line=""><span style="color:#F8F8F2">    create_text_node(item, </span><span style="color:#BD93F9">WP</span><span style="color:#FF79C6"> +</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">post_password</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, CDATA(</span><span style="color:#E9F284">&quot;&quot;</span><span style="color:#F8F8F2">))</span></span>
<span data-line=""><span style="color:#F8F8F2">    create_text_node(item, </span><span style="color:#BD93F9">WP</span><span style="color:#FF79C6"> +</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">is_sticky</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, </span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">0</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""><span style="color:#FF79C6">    return</span><span style="color:#F8F8F2"> item</span></span>
<span data-line=""> </span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">def</span><span style="color:#50FA7B"> create_post_meta_node</span><span style="color:#F8F8F2">(</span><span style="color:#FFB86C;font-style:italic">parent</span><span style="color:#F8F8F2">, </span><span style="color:#FFB86C;font-style:italic">key</span><span style="color:#F8F8F2">, </span><span style="color:#FFB86C;font-style:italic">value</span><span style="color:#F8F8F2">):</span></span>
<span data-line=""><span style="color:#F8F8F2">    post_meta </span><span style="color:#FF79C6">=</span><span style="color:#BD93F9"> ET</span><span style="color:#F8F8F2">.SubElement(parent, </span><span style="color:#BD93F9">WP</span><span style="color:#FF79C6"> +</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">postmeta</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""><span style="color:#F8F8F2">    create_text_node(post_meta, </span><span style="color:#BD93F9">WP</span><span style="color:#FF79C6"> +</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">meta_key</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, CDATA(key))</span></span>
<span data-line=""><span style="color:#F8F8F2">    create_text_node(post_meta, </span><span style="color:#BD93F9">WP</span><span style="color:#FF79C6"> +</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">meta_value</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, CDATA(value))</span></span>
<span data-line=""> </span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">def</span><span style="color:#50FA7B"> serialize_array</span><span style="color:#F8F8F2">(</span><span style="color:#FFB86C;font-style:italic">array</span><span style="color:#F8F8F2">):</span></span>
<span data-line=""><span style="color:#F8F8F2">    string </span><span style="color:#FF79C6">=</span><span style="color:#E9F284"> &#x27;</span><span style="color:#F1FA8C">a:</span><span style="color:#BD93F9">{0}</span><span style="color:#F1FA8C">:</span><span style="color:#BD93F9">{{</span><span style="color:#E9F284">&#x27;</span><span style="color:#F8F8F2">.format(</span><span style="color:#8BE9FD">len</span><span style="color:#F8F8F2">(array) </span><span style="color:#FF79C6">//</span><span style="color:#BD93F9"> 2</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""><span style="color:#FF79C6">    for</span><span style="color:#F8F8F2"> el </span><span style="color:#FF79C6">in</span><span style="color:#F8F8F2"> array:</span></span>
<span data-line=""><span style="color:#F8F8F2">        string </span><span style="color:#FF79C6">+=</span><span style="color:#E9F284"> &#x27;</span><span style="color:#F1FA8C">s:</span><span style="color:#BD93F9">{0}</span><span style="color:#F1FA8C">:&quot;</span><span style="color:#BD93F9">{1}</span><span style="color:#F1FA8C">&quot;;</span><span style="color:#E9F284">&#x27;</span><span style="color:#F8F8F2">.format(</span><span style="color:#8BE9FD">len</span><span style="color:#F8F8F2">(el), el)</span></span>
<span data-line=""><span style="color:#F8F8F2">    string </span><span style="color:#FF79C6">+=</span><span style="color:#E9F284"> &#x27;</span><span style="color:#F1FA8C">}</span><span style="color:#E9F284">&#x27;</span></span>
<span data-line=""><span style="color:#FF79C6">    return</span><span style="color:#F8F8F2"> string</span></span>
<span data-line=""> </span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">def</span><span style="color:#50FA7B"> write_xml</span><span style="color:#F8F8F2">(</span><span style="color:#FFB86C;font-style:italic">root_node</span><span style="color:#F8F8F2">, </span><span style="color:#FFB86C;font-style:italic">filename</span><span style="color:#F8F8F2">):</span></span>
<span data-line=""><span style="color:#F8F8F2">    tree </span><span style="color:#FF79C6">=</span><span style="color:#BD93F9"> ET</span><span style="color:#F8F8F2">.ElementTree(root_node)</span></span>
<span data-line=""><span style="color:#F8F8F2">    os.makedirs(os.path.dirname(filename), </span><span style="color:#FFB86C;font-style:italic">exist_ok</span><span style="color:#FF79C6">=</span><span style="color:#BD93F9">True</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""><span style="color:#F8F8F2">    tree.write(filename, </span><span style="color:#FFB86C;font-style:italic">pretty_print</span><span style="color:#FF79C6">=</span><span style="color:#BD93F9">True</span><span style="color:#F8F8F2">, </span><span style="color:#FFB86C;font-style:italic">encoding</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&#x27;</span><span style="color:#F1FA8C">utf-8</span><span style="color:#E9F284">&#x27;</span><span style="color:#F8F8F2">, </span><span style="color:#FFB86C;font-style:italic">xml_declaration</span><span style="color:#FF79C6">=</span><span style="color:#BD93F9">True</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""> </span></code></pre></figure><p>This library contains has a few useful features:</p><ul>
<li>
<p><span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">create_root_node()</span></span></code></span> and <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">create_channel_node()</span></span></code></span> which, as their name implies, creates the <span data-rehype-pretty-code-figure=""><code data-language="xml" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">rss</span><span style="color:#F8F8F2">&gt;</span></span></code></span> and <span data-rehype-pretty-code-figure=""><code data-language="xml" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">channel</span><span style="color:#F8F8F2">&gt;</span></span></code></span>
nodes, the later with the site’s url, title, author, etc.</p>
</li>
<li>
<p><span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">create_item_node()</span></span></code></span> to create posts, pages and attachments.</p>
</li>
<li>
<p><span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">create_text_node()</span></span></code></span> for <span data-rehype-pretty-code-figure=""><code data-language="xml" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">wp:content</span><span style="color:#F8F8F2">&gt;</span></span></code></span> and <span data-rehype-pretty-code-figure=""><code data-language="xml" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">wp:excerpt</span><span style="color:#F8F8F2">&gt;</span></span></code></span> nodes.</p>
</li>
<li>
<p><span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">create_post_meta_node()</span></span></code></span> for meta such as comments, thumbnails or custom fields.</p>
</li>
<li>
<p><span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">serialize_array()</span></span></code></span> to use arrays in post meta. Particularly useful for custom fields like links.</p>
</li>
</ul><p>And here is an example of their use:</p><figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="python" data-theme="dracula"><code data-language="python" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#6272A4"># Import LXML to manipulate XML files</span></span>
<span data-line=""><span style="color:#FF79C6">from</span><span style="color:#F8F8F2"> lxml </span><span style="color:#FF79C6">import</span><span style="color:#F8F8F2"> etree </span><span style="color:#FF79C6">as</span><span style="color:#BD93F9"> ET</span></span>
<span data-line=""><span style="color:#FF79C6">from</span><span style="color:#F8F8F2"> lxml.etree </span><span style="color:#FF79C6">import</span><span style="color:#BD93F9"> CDATA</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6272A4"># Import wordpress specific nodes</span></span>
<span data-line=""><span style="color:#FF79C6">from</span><span style="color:#F8F8F2"> wxr_utils </span><span style="color:#FF79C6">import</span><span style="color:#BD93F9"> WP</span></span>
<span data-line=""><span style="color:#FF79C6">from</span><span style="color:#F8F8F2"> wxr_utils </span><span style="color:#FF79C6">import</span><span style="color:#BD93F9"> CONTENT</span></span>
<span data-line=""><span style="color:#FF79C6">from</span><span style="color:#F8F8F2"> wxr_utils </span><span style="color:#FF79C6">import</span><span style="color:#BD93F9"> EXCERPT</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#FF79C6">from</span><span style="color:#F8F8F2"> wxr_utils </span><span style="color:#FF79C6">import</span><span style="color:#F8F8F2"> create_root_node</span></span>
<span data-line=""><span style="color:#FF79C6">from</span><span style="color:#F8F8F2"> wxr_utils </span><span style="color:#FF79C6">import</span><span style="color:#F8F8F2"> create_channel_node</span></span>
<span data-line=""><span style="color:#FF79C6">from</span><span style="color:#F8F8F2"> wxr_utils </span><span style="color:#FF79C6">import</span><span style="color:#F8F8F2"> create_item_node</span></span>
<span data-line=""><span style="color:#FF79C6">from</span><span style="color:#F8F8F2"> wxr_utils </span><span style="color:#FF79C6">import</span><span style="color:#F8F8F2"> create_text_node</span></span>
<span data-line=""><span style="color:#FF79C6">from</span><span style="color:#F8F8F2"> wxr_utils </span><span style="color:#FF79C6">import</span><span style="color:#F8F8F2"> create_post_meta_node</span></span>
<span data-line=""><span style="color:#FF79C6">from</span><span style="color:#F8F8F2"> wrx_utils </span><span style="color:#FF79C6">import</span><span style="color:#F8F8F2"> serialize_array</span></span>
<span data-line=""><span style="color:#FF79C6">from</span><span style="color:#F8F8F2"> wxr_utils </span><span style="color:#FF79C6">import</span><span style="color:#F8F8F2"> write_xml</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#BD93F9">HOME_ROOT</span><span style="color:#FF79C6"> =</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">https://domain.tld</span><span style="color:#E9F284">&quot;</span></span>
<span data-line=""><span style="color:#BD93F9">FILENAME</span><span style="color:#FF79C6"> =</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">out/export.xml</span><span style="color:#E9F284">&quot;</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6272A4"># Creates the &lt;rss&gt; root node</span></span>
<span data-line=""><span style="color:#F8F8F2">root </span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2"> create_root_node()</span></span>
<span data-line=""><span style="color:#6272A4"># Creates the &lt;channel&gt; node and fills the website&#x27;s information</span></span>
<span data-line=""><span style="color:#F8F8F2">channel </span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2"> create_channel_node(root, </span><span style="color:#E9F284">&#x27;</span><span style="color:#F1FA8C">My awesome website</span><span style="color:#E9F284">&#x27;</span><span style="color:#F8F8F2">, </span><span style="color:#BD93F9">WEBSITE_ROOT</span><span style="color:#F8F8F2">, </span><span style="color:#E9F284">&#x27;</span><span style="color:#F1FA8C">fr_FR</span><span style="color:#E9F284">&#x27;</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6272A4"># Adding a picture</span></span>
<span data-line=""><span style="color:#F8F8F2">logo_url </span><span style="color:#FF79C6">=</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">https://domain.tld/path/to/picture.jpg</span><span style="color:#E9F284">&quot;</span></span>
<span data-line=""><span style="color:#F8F8F2">logo_item </span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2"> create_item_node(</span></span>
<span data-line=""><span style="color:#FFB86C;font-style:italic">        parent</span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2">channel,</span></span>
<span data-line=""><span style="color:#FFB86C;font-style:italic">        post_id</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#BD93F9">{0}</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">.format(</span><span style="color:#BD93F9">10</span><span style="color:#F8F8F2">),</span></span>
<span data-line=""><span style="color:#FFB86C;font-style:italic">        title</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">logo</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#FFB86C;font-style:italic">        link</span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2">logo_url,</span></span>
<span data-line=""><span style="color:#FFB86C;font-style:italic">        post_name</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">logo</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#FFB86C;font-style:italic">        status</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">publish</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#FFB86C;font-style:italic">        post_type</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">attachment</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#F8F8F2">logo_path </span><span style="color:#FF79C6">=</span><span style="color:#E9F284"> &quot;</span><span style="color:#BD93F9">{0}</span><span style="color:#F1FA8C">/</span><span style="color:#BD93F9">{1}</span><span style="color:#F1FA8C">/</span><span style="color:#BD93F9">{2}</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">.format(</span><span style="color:#E9F284">&#x27;</span><span style="color:#F1FA8C">2020</span><span style="color:#E9F284">&#x27;</span><span style="color:#F8F8F2">, </span><span style="color:#E9F284">&#x27;</span><span style="color:#F1FA8C">04</span><span style="color:#E9F284">&#x27;</span><span style="color:#F8F8F2">, </span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">picture</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""><span style="color:#F8F8F2">create_text_node(logo_item, </span><span style="color:#BD93F9">WP</span><span style="color:#FF79C6"> +</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">attachment_url</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, CDATA(logo_url))</span></span>
<span data-line=""><span style="color:#F8F8F2">create_post_meta_node(logo_item, </span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">_wp_attached_file</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, logo_path)</span></span>
<span data-line=""><span style="color:#F8F8F2">guid </span><span style="color:#FF79C6">=</span><span style="color:#BD93F9"> ET</span><span style="color:#F8F8F2">.SubElement(logo_item, </span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">guid</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, </span><span style="color:#FFB86C;font-style:italic">isPermalink</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">false</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""><span style="color:#F8F8F2">guid.text </span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2"> logo_url</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6272A4"># Adding a post</span></span>
<span data-line=""><span style="color:#F8F8F2">slug </span><span style="color:#FF79C6">=</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">my-article</span><span style="color:#E9F284">&quot;</span></span>
<span data-line=""><span style="color:#F8F8F2">item </span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2"> create_item_node(</span></span>
<span data-line=""><span style="color:#FFB86C;font-style:italic">        parent</span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2">channel,</span></span>
<span data-line=""><span style="color:#FFB86C;font-style:italic">        post_id</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#BD93F9">{0}</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">.format(</span><span style="color:#BD93F9">11</span><span style="color:#F8F8F2">),</span></span>
<span data-line=""><span style="color:#FFB86C;font-style:italic">        title</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">My article</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#FFB86C;font-style:italic">        link</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#BD93F9">{0}</span><span style="color:#F1FA8C">/</span><span style="color:#BD93F9">{1}</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">.format(</span><span style="color:#BD93F9">WEBSITE_ROOT</span><span style="color:#F8F8F2">, slug),</span></span>
<span data-line=""><span style="color:#FFB86C;font-style:italic">        post_name</span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2">slug,</span></span>
<span data-line=""><span style="color:#FFB86C;font-style:italic">        status</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">publish</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#FFB86C;font-style:italic">        post_type</span><span style="color:#FF79C6">=</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">post</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""><span style="color:#F8F8F2">create_text_node(item, </span><span style="color:#BD93F9">CONTENT</span><span style="color:#FF79C6"> +</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">encoded</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, CDATA(</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">&lt;p&gt;Article content&lt;/p&gt;</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">))</span></span>
<span data-line=""><span style="color:#F8F8F2">create_text_node(item, </span><span style="color:#BD93F9">EXCERPT</span><span style="color:#FF79C6"> +</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">encoded</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, CDATA(</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">&lt;p&gt;Article excerpt&lt;/p&gt;</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">))</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6272A4"># Adding a category to the post</span></span>
<span data-line=""><span style="color:#6272A4"># NB: you can add more than one category</span></span>
<span data-line=""><span style="color:#F8F8F2">cat_node </span><span style="color:#FF79C6">=</span><span style="color:#BD93F9"> ET</span><span style="color:#F8F8F2">.SubElement(item, </span><span style="color:#E9F284">&#x27;</span><span style="color:#F1FA8C">category</span><span style="color:#E9F284">&#x27;</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""><span style="color:#F8F8F2">cat_node.set(</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">domain</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, </span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">category</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""><span style="color:#F8F8F2">cat_node.set(</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">nicename</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, </span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">category-slug</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""><span style="color:#F8F8F2">cat_node.text </span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2"> CDATA(</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">Category name</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6272A4"># Adding a tag to the post</span></span>
<span data-line=""><span style="color:#6272A4">## NB: you can add more than one tag</span></span>
<span data-line=""><span style="color:#F8F8F2">cat_node </span><span style="color:#FF79C6">=</span><span style="color:#BD93F9"> ET</span><span style="color:#F8F8F2">.SubElement(item, </span><span style="color:#E9F284">&#x27;</span><span style="color:#F1FA8C">category</span><span style="color:#E9F284">&#x27;</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""><span style="color:#F8F8F2">cat_node.set(</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">domain</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, </span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">post-tag</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""><span style="color:#F8F8F2">cat_node.set(</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">nicename</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, </span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">tag-slug</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""><span style="color:#F8F8F2">cat_node.text </span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2"> CDATA(</span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">Tag name</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6272A4"># Add the picture as thumbnail</span></span>
<span data-line=""><span style="color:#F8F8F2">create_post_meta_node(item, </span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">_thumbnail_id</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, </span><span style="color:#E9F284">&quot;</span><span style="color:#BD93F9">{0}</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">.format(</span><span style="color:#BD93F9">10</span><span style="color:#F8F8F2">))</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6272A4"># Fill a text custom field</span></span>
<span data-line=""><span style="color:#F8F8F2">create_post_meta_node(item, </span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">my-custom-field</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, </span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">Some text</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""><span style="color:#F8F8F2">create_post_meta_node(item, </span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">_my-custom-field</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, </span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">field_5e9d99af9f6b7</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6272A4"># Fill a link custom field</span></span>
<span data-line=""><span style="color:#F8F8F2">cta_array </span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2"> [</span><span style="color:#E9F284">&#x27;</span><span style="color:#F1FA8C">title</span><span style="color:#E9F284">&#x27;</span><span style="color:#F8F8F2">, </span><span style="color:#E9F284">&#x27;</span><span style="color:#F1FA8C">Click Me!</span><span style="color:#E9F284">&#x27;</span><span style="color:#F8F8F2">, </span><span style="color:#E9F284">&#x27;</span><span style="color:#F1FA8C">url</span><span style="color:#E9F284">&#x27;</span><span style="color:#F8F8F2">, </span><span style="color:#E9F284">&#x27;</span><span style="color:#F1FA8C">https://domain.tld/link/of/cta</span><span style="color:#E9F284">&#x27;</span><span style="color:#F8F8F2">, </span><span style="color:#E9F284">&#x27;</span><span style="color:#F1FA8C">target</span><span style="color:#E9F284">&#x27;</span><span style="color:#F8F8F2">, </span><span style="color:#E9F284">&#x27;</span><span style="color:#F1FA8C">_blank</span><span style="color:#E9F284">&#x27;</span><span style="color:#F8F8F2">]</span></span>
<span data-line=""><span style="color:#F8F8F2">create_post_meta_node(item, </span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">link-cta</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, serialize_array(cta_array))</span></span>
<span data-line=""><span style="color:#F8F8F2">create_post_meta_node(item, </span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">_link-cta</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">, </span><span style="color:#E9F284">&quot;</span><span style="color:#F1FA8C">field_5cb2a93cddf5b</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">)</span></span>
<span data-line=""> </span>
<span data-line=""><span style="color:#6272A4"># Save files</span></span>
<span data-line=""><span style="color:#F8F8F2">write_xml(root, </span><span style="color:#BD93F9">FILENAME</span><span style="color:#F8F8F2">)</span></span></code></pre></figure><p>Feel free to modify my library in order to modify fields I didn’t need to set, such as <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">post_date</span></span></code></span>, <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">is_sticky</span></span></code></span>
or <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">post_parent</span></span></code></span>, or even add functions to automate the creations of nodes such as <span data-rehype-pretty-code-figure=""><code data-language="xml" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">category</span><span style="color:#F8F8F2">&gt;</span></span></code></span>
and <strong>good luck migrating to Wordpress</strong>!</p></section>]]></content:encoded></item><item><title><![CDATA[The making of PhotoGallery]]></title><description><![CDATA[While most sane persons would use an off-the-shelf solution for their portfolio, I went the opposite route. Follow along as I tell and reflect on my journey to build a fully serverless and dynamic portfolio for my photos.
]]></description><link>https://axel.leroy.sh/blog/the-making-of-photo-gallery?utm_source=rss</link><guid isPermaLink="false">https://axel.leroy.sh/blog/the-making-of-photo-gallery</guid><category><![CDATA[Web development]]></category><category><![CDATA[Personal projects]]></category><dc:creator><![CDATA[Axel Leroy]]></dc:creator><pubDate>Fri, 03 Apr 2020 20:20:00 GMT</pubDate><enclosure url="https://axel.leroy.sh/blog/the-making-of-photo-gallery/og.jpg" length="0" type="image/jpeg"/><content:encoded><![CDATA[<link rel="preload" as="image" href="https://axel.leroy.sh/blog/the-making-of-photo-gallery/og.jpg"/><link rel="preload" as="image" href="https://axel.leroy.sh/img/introducing-photo-gallery/google_photos.jpg"/><link rel="preload" as="image" href="https://axel.leroy.sh/img/introducing-photo-gallery/exif.jpg"/><link rel="preload" as="image" href="https://axel.leroy.sh/img/introducing-photo-gallery/finished-product.jpg"/><p><img src="https://axel.leroy.sh/blog/the-making-of-photo-gallery/og.jpg" alt=""/></p>
<p>A little over 6 months ago, a fellow photographer asked this seemingly simple question:</p>
<blockquote><p>Do you have a portfolio? I mean, something other than an <a href="https://instagram.com/axeleroy_">Instagram account</a>?“.</p></blockquote>
<p>Oh boy, did he even know what he was getting me into with this question!</p>
<section><h2 id="why-make-a-custom-portfolio-in-the-first-place"><a aria-hidden="true" tabindex="-1" href="#why-make-a-custom-portfolio-in-the-first-place"><span>#</span></a>Why make a custom portfolio in the first place?</h2><p>Most people would have replied either</p><blockquote><p>Oh, <strong>I have an account on</strong> Flickr/500px/some other photo sharing platform</p></blockquote><p>or</p><blockquote><p>No, but now that you’re talking about it, I <strong>might</strong> create one using Squarespace/Wix/Wordpress with a ton of
plugins</p></blockquote><p>All of which are valid answers (well, except the Wordpress one: rellying on a ton of plugins is <em>never a good idea</em>).</p><p>But you know us, <em>developers</em>: we are eager to build everything ourselves, so the obvious answer was</p><blockquote><p>Not yet, but <strong>I will build one tailored to my exact needs</strong>.</p></blockquote></section>
<section><h2 id="the-inspiration"><a aria-hidden="true" tabindex="-1" href="#the-inspiration"><span>#</span></a>The inspiration</h2><p>Before this conversation, I already had an itch to completely redo my personal website for something more streamlined
(as I explained in <a href="https://axel.leroy.sh/blog/a-clean-slate">A Clean Slate</a>) and had a vision for a photo gallery
that would <strong>look a lot like Google Photo</strong>’s handsome looking gallery.</p><p><img src="https://axel.leroy.sh/img/introducing-photo-gallery/google_photos.jpg" alt="Screenshot of a Google Photos album"/></p><p>At some point I even toyed with using its API to fetch and display pictures from Google Photos on the web, as it already
has all my pictures. But ended up scrapping this idea as Google Photo’s API doesn’t fit my use-case: it’s really
intended for Android OEMs to integrate Google Photo’s features into their galleries.</p></section>
<section><h2 id="the-architecture"><a aria-hidden="true" tabindex="-1" href="#the-architecture"><span>#</span></a>The architecture</h2><p>Back to this conversation back in September: as we talked, I started thinking of a simple solution. I already knew I wanted
the next iteration of my website to be <strong>static</strong> for obvious security, cost and performance reasons.</p><p>I ended using a static site generator for this exact website you’re browsing, but not for my gallery project, for the
following reasons:</p><ul>
<li>Each time I would add an album, the site generator would generate a ton of new pages that I would have to upload.</li>
<li>Browsing from a picture to the next would mean changing pages, which I did not want in order to maintain a pleasant
experience for the user.</li>
<li>I wanted to display various information (aperture, shutter speed, focal length) from the picture’s EXIF. It might have
been cumbersome to do it using a static site generator.</li>
</ul><p>My second option was then to develop a webapp: I could embed it in one of my site’s page and it would live its life happily,
fetching the data it needs from…</p><p>Oh right, <strong>how do I manage the data representation of my albums</strong>?</p><p>Since I wanted this gallery to be cost-efficient, there was no way I would build, host and maintain a back-end.
Instead, I chose to store the data as JSON files alongside the pictures, in AWS S3.</p></section>
<section><h2 id="the-development"><a aria-hidden="true" tabindex="-1" href="#the-development"><span>#</span></a>The development</h2><p>With the basics figured out, I went on to develop my webapp. I picked Angular because of my familiarity with the
framework and as a way to learn features I have not used yet.</p><p>Once the core feature set done (list the albums, the pictures within an album and display a single picture) the next
feature to tackle was displaying a picture’s information.</p><p><img src="https://axel.leroy.sh/img/introducing-photo-gallery/exif.jpg" alt="Screenshot of Photo Gallery displaying a picture&#x27;s information"/></p><p>Hopefully someone already tackled the problem and developed a <a href="https://github.com/exif-js/exif-js">JS library to extract EXIF data</a>
from an <span data-rehype-pretty-code-figure=""><code data-language="html" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">img</span><span style="color:#F8F8F2">&gt;</span></span></code></span> element. The hardest thing was eventually getting it to work with Angular.</p><p>In a nutshell:</p><ul>
<li>
<p>I had to pass the <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">ElementRef</span></span></code></span> of the <span data-rehype-pretty-code-figure=""><code data-language="html" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">img</span><span style="color:#F8F8F2">&gt;</span></span></code></span> from a component to another, and then call <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">EXIF.getData()</span></span></code></span>
with a reference to the component’s class.</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="typescript" data-theme="dracula"><code data-language="typescript" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#FF79C6">const</span><span style="color:#F8F8F2"> self </span><span style="color:#FF79C6">=</span><span style="color:#BD93F9;font-style:italic"> this</span><span style="color:#F8F8F2">;</span></span>
<span data-line=""><span style="color:#BD93F9">EXIF</span><span style="color:#F8F8F2">.</span><span style="color:#50FA7B">getData</span><span style="color:#F8F8F2">(img, </span><span style="color:#FF79C6">function</span><span style="color:#F8F8F2">() {</span></span>
<span data-line=""><span style="color:#F8F8F2">   self.exifTags  </span><span style="color:#FF79C6">=</span><span style="color:#BD93F9"> EXIF</span><span style="color:#F8F8F2">.</span><span style="color:#50FA7B">getAllTags</span><span style="color:#F8F8F2">(</span><span style="color:#BD93F9;font-style:italic">this</span><span style="color:#F8F8F2">);</span></span>
<span data-line=""><span style="color:#F8F8F2">});</span></span></code></pre></figure>
</li>
<li>
<p>Because exif-js “caches” the parsed EXIF tags in the <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">ElementRef</span></span></code></span>’s <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">exifTags</span></span></code></span>, when the <span data-rehype-pretty-code-figure=""><code data-language="html" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">&lt;</span><span style="color:#FF79C6">img</span><span style="color:#F8F8F2">&gt;</span></span></code></span>’s source changed
it would just read the cached value instead of parsing the EXIF from the new picture. To fix this I had to reset the
content of <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">exifTags</span></span></code></span>.</p>
</li>
</ul><p><img src="https://axel.leroy.sh/img/introducing-photo-gallery/finished-product.jpg" alt="Screenshot of Photo Gallery displaying an album"/></p><p>And then there was the Google Photos look. It first seemed difficult after reading Google’s
<a href="https://medium.com/google-design/google-photos-45b714dfbed1">article describing the design process behind their now iconic grid</a>,
but after a few searches, <a href="https://codepen.io/DarkoKukovec/pen/mgowGG">I found a simple CSS and JS solution</a> that gave
me the exact look I wanted. The final touch was adding the <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">height</span></span></code></span> and <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">width</span></span></code></span> attributes so that the thumbnails
<a href="https://github.com/WICG/intrinsicsize-attribute/issues/16">have the correct ratio and size before loading on supported browsers</a>.</p><p>Obviously, to make my life easier, I built a script to upload and create albums. I chose Python as it is really well
suited for handling JSON and has libraries for interacting with <a href="https://github.com/boto/boto3">AWS’s services</a>
and <a href="http://docs.wand-py.org/en/latest/">ImageMagick</a>, the go-to cross-platform image conversion software.</p></section>
<section><h2 id="efficiency"><a aria-hidden="true" tabindex="-1" href="#efficiency"><span>#</span></a>Efficiency</h2><p>As I stated earlier, I wanted this gallery to be fast and cost-efficient. In order to achieve this, I worked on
caching and reducing file sizes.</p><p>In order to make the app feel fast and to not have to fetch the JSON from S3 every time the user would navigate to
the albums list or an album page, I used <a href="https://dexie.org/">Dexie.js</a> −an IndexedDB wrapper I already used on my
previous project <a href="https://github.com/axeleroy/commechezsoi">Comme Chez Soi</a>− to store the content of the JSONs and then act as an offline cache.</p><p>I then went to <em>reduce the size of the pictures</em> and their thumbnails with ImageMagick, which is incredibly easy to do
using <a href="http://docs.wand-py.org/en/0.5.9/">Wand</a>, a Python binding for ImageMagick.</p><section role="note" aria-label="Note" class="Blocks_info__wkiHx Blocks_post-it__gf2kM Blocks_common__p7gh9"><p>Speaking of Wand, here is a tip: always use <span data-rehype-pretty-code-figure=""><code data-language="python" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">Image.auto_orient()</span></span></code></span> so that ImageMagick will orient the
picture according to the data from the EXIF, <a href="https://medium.com/@Orangeeli/oh-my-exif-777335e26213">as web browsers do not always to it
properly</a>.</p></section><p>Finally, I used the incredible versatility of CloudFront to speed up the delivery of the pictures using its CDN
feature, and I also added a <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">Cache-Control</span></span></code></span> header using <a href="https://gist.github.com/jkrnak/a9a98aad61779ba8acc22109891fb953#file-handler-js">a very simple Lambda@Edge function</a>
to tell the browser to keep the pictures in cache for 14 days.</p></section>
<section><h2 id="whats-next"><a aria-hidden="true" tabindex="-1" href="#whats-next"><span>#</span></a>What’s next?</h2><p>Functionnaly, I’m pretty pleased with <a href="https://github.com/axeleroy/photo-gallery">the result</a>, but I think I can
still squeeze some megabytes off my monthly CloudFront bill by using <a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images">responsive images</a> to serve smaller
thumbnails to small screens and using the <a href="https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types#WebP">WebP</a> image format to serve pictures with even smaller file sizes.</p><p>These two will definitely be challenges as I will have to rewrite a good portion of the app to handle them!</p><hr/><section><h3 id="april-28ths-update-about-the-responsive-images-and-webp-refactoring"><a aria-hidden="true" tabindex="-1" href="#april-28ths-update-about-the-responsive-images-and-webp-refactoring"><span>##</span></a><em>April 28th’s update</em> about the responsive images and WebP refactoring</h3><p>Well, handling responsive images and WebP was indeed a challenge and it was much more difficult than
I originaly anticipated.</p><p>The first hurdle was generating WebP pictures: some builds of ImageMagick do not handle WebP conversion, which is
the case of the version of ImageMagick in Ubuntu 18.04 LTS.</p><p>To get arround this problem, I had to refactor the upload script to use <em>Pillow</em> instead of Wand, which was quite
painful since Pillow’s API is quite different from Wand as well as some dubious default behaviors:</p><ul>
<li>
<p>By default, <strong>Pillow does not keep the EXIF</strong> when saving a picture! If you want to keep the EXIF, you have to do the
following:</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="python" data-theme="dracula"><code data-language="python" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#FF79C6">with</span><span style="color:#F8F8F2"> Image.open(picture_path) </span><span style="color:#FF79C6">as</span><span style="color:#F8F8F2"> img:</span></span>
<span data-line=""><span style="color:#F8F8F2">    exif </span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2"> img.info[</span><span style="color:#E9F284">&#x27;</span><span style="color:#F1FA8C">exif</span><span style="color:#E9F284">&#x27;</span><span style="color:#F8F8F2">]</span></span>
<span data-line=""><span style="color:#6272A4">    # Process the picture</span></span>
<span data-line=""><span style="color:#F8F8F2">    img.save(save_path, </span><span style="color:#FFB86C;font-style:italic">format</span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2">file_format, </span><span style="color:#FFB86C;font-style:italic">exif</span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2">exif)</span></span></code></pre></figure>
</li>
<li>
<p>Unless you tell it otherwise, <strong>Pillow will save your JPEGs with agressive and very lossy compression</strong> by <a href="https://stackoverflow.com/a/19303889">using a
quality factor of 75 and chroma subsampling</a>.</p>
<figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="python" data-theme="dracula"><code data-language="python" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#F8F8F2">img.save(in_mem_file, </span><span style="color:#FFB86C;font-style:italic">format</span><span style="color:#FF79C6">=</span><span style="color:#F8F8F2">file_format, </span><span style="color:#FFB86C;font-style:italic">subsampling</span><span style="color:#FF79C6">=</span><span style="color:#BD93F9">0</span><span style="color:#F8F8F2">, </span><span style="color:#FFB86C;font-style:italic">quality</span><span style="color:#FF79C6">=</span><span style="color:#BD93F9">100</span><span style="color:#F8F8F2">)</span></span></code></pre></figure>
</li>
</ul><p>After modifying the picture processing, I then had to change my data model to handle different sizes and format,
which for each picture looks like this:</p><figure data-rehype-pretty-code-figure=""><pre style="background-color:#282A36;color:#F8F8F2" tabindex="0" data-language="json" data-theme="dracula"><code data-language="json" data-theme="dracula" style="display:grid"><span data-line=""><span style="color:#F8F8F2">{</span></span>
<span data-line=""><span style="color:#8BE9FE">    &quot;</span><span style="color:#8BE9FD">id</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9"> 1</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#8BE9FE">    &quot;</span><span style="color:#8BE9FD">thumbnail</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#6272A4">        // Default size, used when the browser does not handle &lt;picture&gt;</span></span>
<span data-line=""><span style="color:#8BE9FE">        &quot;</span><span style="color:#8BE9FD">default</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#8BE9FE">            &quot;</span><span style="color:#8BE9FD">url</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">https://www.zzz/album/thumbnail/picture.jpg</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#8BE9FE">            &quot;</span><span style="color:#8BE9FD">with</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9"> 200</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#8BE9FE">            &quot;</span><span style="color:#8BE9FD">height</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9"> 133</span></span>
<span data-line=""><span style="color:#F8F8F2">        },</span></span>
<span data-line=""><span style="color:#8BE9FE">        &quot;</span><span style="color:#8BE9FD">sizes</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#6272A4">            // For each media type, an array with the different thumbnail sizes</span></span>
<span data-line=""><span style="color:#8BE9FE">            &quot;</span><span style="color:#8BE9FD">jpeg</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> [</span></span>
<span data-line=""><span style="color:#F8F8F2">                {</span></span>
<span data-line=""><span style="color:#8BE9FE">                    &quot;</span><span style="color:#8BE9FD">url</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">https://www.zzz/album/thumbnail/picture-200.jpg</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#8BE9FE">                    &quot;</span><span style="color:#8BE9FD">with</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9"> 200</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#8BE9FE">                    &quot;</span><span style="color:#8BE9FD">height</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9"> 133</span></span>
<span data-line=""><span style="color:#F8F8F2">                },</span></span>
<span data-line=""><span style="color:#F8F8F2">                {</span></span>
<span data-line=""><span style="color:#8BE9FE">                    &quot;</span><span style="color:#8BE9FD">url</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">https://www.zzz/album/thumbnail/picture-400.jpg</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#8BE9FE">                    &quot;</span><span style="color:#8BE9FD">with</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9"> 400</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#8BE9FE">                    &quot;</span><span style="color:#8BE9FD">height</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9"> 267</span></span>
<span data-line=""><span style="color:#F8F8F2">                }</span></span>
<span data-line=""><span style="color:#6272A4">                // ...</span></span>
<span data-line=""><span style="color:#F8F8F2">            ],</span></span>
<span data-line=""><span style="color:#8BE9FE">            &quot;</span><span style="color:#8BE9FD">webp</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> [</span></span>
<span data-line=""><span style="color:#F8F8F2">                {</span></span>
<span data-line=""><span style="color:#8BE9FE">                    &quot;</span><span style="color:#8BE9FD">url</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">https://www.zzz/album/thumbnail/picture-200.jpg</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#8BE9FE">                    &quot;</span><span style="color:#8BE9FD">with</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9"> 200</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#8BE9FE">                    &quot;</span><span style="color:#8BE9FD">height</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9"> 133</span></span>
<span data-line=""><span style="color:#F8F8F2">                },</span></span>
<span data-line=""><span style="color:#F8F8F2">                {</span></span>
<span data-line=""><span style="color:#8BE9FE">                    &quot;</span><span style="color:#8BE9FD">url</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">https://www.zzz/album/thumbnail/picture-400.jpg</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#8BE9FE">                    &quot;</span><span style="color:#8BE9FD">with</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9"> 400</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#8BE9FE">                    &quot;</span><span style="color:#8BE9FD">height</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9"> 267</span></span>
<span data-line=""><span style="color:#F8F8F2">                }</span></span>
<span data-line=""><span style="color:#6272A4">                // ...</span></span>
<span data-line=""><span style="color:#F8F8F2">            ]</span></span>
<span data-line=""><span style="color:#F8F8F2">        }</span></span>
<span data-line=""><span style="color:#F8F8F2">    },</span></span>
<span data-line=""><span style="color:#6272A4">    // For fullsize pictures, same deal as thumbnails</span></span>
<span data-line=""><span style="color:#8BE9FE">    &quot;</span><span style="color:#8BE9FD">fullsize</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#6272A4">        // Default size, used when the browser does not handle &lt;picture&gt;</span></span>
<span data-line=""><span style="color:#8BE9FE">        &quot;</span><span style="color:#8BE9FD">default</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#8BE9FE">            &quot;</span><span style="color:#8BE9FD">url</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">https://www.zzz/album/picture.jpg</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#8BE9FE">            &quot;</span><span style="color:#8BE9FD">with</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9"> 6000</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#8BE9FE">            &quot;</span><span style="color:#8BE9FD">height</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9"> 4000</span></span>
<span data-line=""><span style="color:#F8F8F2">        },</span></span>
<span data-line=""><span style="color:#8BE9FE">        &quot;</span><span style="color:#8BE9FD">sizes</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> {</span></span>
<span data-line=""><span style="color:#6272A4">            // For each media type, an array with the different thumbnail sizes</span></span>
<span data-line=""><span style="color:#8BE9FE">            &quot;</span><span style="color:#8BE9FD">jpeg</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> [</span></span>
<span data-line=""><span style="color:#F8F8F2">                {</span></span>
<span data-line=""><span style="color:#8BE9FE">                    &quot;</span><span style="color:#8BE9FD">url</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">https://www.zzz/album/thumbnail/picture-200.jpg</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#8BE9FE">                    &quot;</span><span style="color:#8BE9FD">with</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9"> 200</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#8BE9FE">                    &quot;</span><span style="color:#8BE9FD">height</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9"> 133</span></span>
<span data-line=""><span style="color:#F8F8F2">                },</span></span>
<span data-line=""><span style="color:#6272A4">                // ...</span></span>
<span data-line=""><span style="color:#F8F8F2">                {</span></span>
<span data-line=""><span style="color:#8BE9FE">                    &quot;</span><span style="color:#8BE9FD">url</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#E9F284"> &quot;</span><span style="color:#F1FA8C">https://www.zzz/album/thumbnail/picture-1920.jpg</span><span style="color:#E9F284">&quot;</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#8BE9FE">                    &quot;</span><span style="color:#8BE9FD">with</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9"> 1920</span><span style="color:#F8F8F2">,</span></span>
<span data-line=""><span style="color:#8BE9FE">                    &quot;</span><span style="color:#8BE9FD">height</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#BD93F9"> 1280</span></span>
<span data-line=""><span style="color:#F8F8F2">                }</span></span>
<span data-line=""><span style="color:#F8F8F2">            ],</span></span>
<span data-line=""><span style="color:#8BE9FE">            &quot;</span><span style="color:#8BE9FD">webp</span><span style="color:#8BE9FE">&quot;</span><span style="color:#FF79C6">:</span><span style="color:#F8F8F2"> [</span></span>
<span data-line=""><span style="color:#6272A4">                // ...</span></span>
<span data-line=""><span style="color:#F8F8F2">            ]</span></span>
<span data-line=""><span style="color:#F8F8F2">        }</span></span>
<span data-line=""><span style="color:#F8F8F2">    }</span></span>
<span data-line=""><span style="color:#F8F8F2">}</span></span></code></pre></figure><p>Changing the datamodel also meant migrating the existing data.</p><p>For the data initially stored in the front-end’s IndexedDB, <strong>I ended up ditching Dexie as the browser already caches
the JSON</strong> following the <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">Cache-Control</span></span></code></span> header.
Using the browser cache is also more stable *s some vendors are imposing constraints on IndexedDB: Apple for example
<a href="https://webkit.org/blog/10218/full-third-party-cookie-blocking-and-more/">announced that Safari will clear local storage if the website has not been visited in the last 7 days</a>.</p><p>I also had to migrate my exisiting albums’ JSONs, so I wrote <a href="https://github.com/axeleroy/photo-gallery/blob/master/scripts/migrate_album.py">a migration script</a>
that, given an album ID:</p><ul>
<li>downloads the album’s JSON,</li>
<li>downloads each picture described in it, makes new thumbnails and intermediate full-sizes pictures and uploads them,</li>
<li>updates the JSON with the new structure and uploads it</li>
</ul><p>Finally, <strong>I had to let go of parsing EXIF on the front-end</strong> as neither <a href="https://github.com/exif-js/exif-js">exif-js</a>
nor the more recent <a href="https://github.com/mattiasw/ExifReader">ExifReader</a> and <a href="https://github.com/MikeKovarik/exifr">exifr</a>
are currently able to parse EXIF from WebP pictures, forcing me to
<a href="https://github.com/axeleroy/photo-gallery/blob/master/scripts/exif_lib.py">parse the EXIF in the upload script using Pillow</a>.
At least it allowed me to shave a few dozen kilobytes off the generated Javascript!</p><p>It was frustrating at times, especially having to rewrite major parts of the app twice, but in the end <strong>it was worth it
as thumbnails now load a lot faster</strong> on limited bandwith!</p></section></section>]]></content:encoded></item><item><title><![CDATA[A Clean Slate]]></title><description><![CDATA[Introducing my new personal website.]]></description><link>https://axel.leroy.sh/blog/a-clean-slate?utm_source=rss</link><guid isPermaLink="false">https://axel.leroy.sh/blog/a-clean-slate</guid><category><![CDATA[Blog]]></category><dc:creator><![CDATA[Axel Leroy]]></dc:creator><pubDate>Sat, 30 Nov 2019 00:08:00 GMT</pubDate><enclosure url="https://axel.leroy.sh/blog/a-clean-slate/og.jpg" length="0" type="image/jpeg"/><content:encoded><![CDATA[<link rel="preload" as="image" href="https://axel.leroy.sh/blog/a-clean-slate/og.jpg"/><p><img src="https://axel.leroy.sh/blog/a-clean-slate/og.jpg" alt=""/></p>
<p><em>It has been over 10 years</em> since I first put together my personal website, and I believe <strong>it’s finally time for a complete makeover</strong>:
what I always envisioned as a place to establish my online presence, to showcase my projects and to express myself had become <strong>obsolete</strong>.</p>
<p>I have to admit that since I entered adulthood, <strong>I neglected it</strong>: I never updated it, its look became dated and most
importantly, as my last blog entries were written four~seven years ago, <strong>it no longer represented the person I am</strong>, nor
my current opinions.</p>
<p>So I made the hard decision to not keep this legacy, to delete the entirety of <span data-rehype-pretty-code-figure=""><code data-language="ansi" data-theme="dracula" style="background-color:#282A36;color:#F8F8F2"><span data-line=""><span style="color:#F8F8F2">axel-leroy.com</span></span></code></span> and to <strong>start anew from a
clean slate</strong>.</p>
<p>The vision I described earlier is still there: <strong><a href="https://axel.leroy.sh/">/home</a></strong> establishes my online presence with links to relevant
social media, <strong><a href="https://axel.leroy.sh/photography">/photography</a></strong> showcases my photography portfolio and <strong><a href="https://axel.leroy.sh/blog">/blog</a></strong> is going to be where
I’ll express myself, in ways I cannot in <a href="https://twitter.com/axeleroy_">a tweet</a> or <a href="https://instagram.com/axeleroy_">picture</a>.</p>
<p>I hope to see you soon in this new home!</p>
<p>Axel</p>]]></content:encoded></item></channel></rss>`;
